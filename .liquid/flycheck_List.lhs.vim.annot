1:1-1:1::$con2tag_rVm :: "(List a) -> Int#"
55:25-55:27::$fEqList :: "(Eq a) => (Eq (List a))"
55:29-55:32::$fOrdList :: "(Eq (List a), Ord a) => (Ord (List a))"
55:34-55:38::$fShowList :: "(Show a) => (Show (List a))"
89:1-89:7::length :: "(List a) -> {VV : Int | VV >= 0}"
90:21-90:34::lq_anf$ :: "{v : Int | v == (1 : int)}"
90:23-90:24::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
90:25-90:34::lq_anf$ :: "{v : Int | v >= 0}"
98:1-98:10::prop_size :: "{v : Bool | Prop v}"
98:14-98:21::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
98:23-98:32::lq_anf$ :: "{v : Int | v >= 0}"
98:33-98:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
101:1-101:3::l3 :: "{v : (List Int) | size v == 3}"
104:1-104:3::l2 :: "{v : (List Int) | size v == 2}"
107:1-107:3::l1 :: "{v : (List Int) | size v == 1}"
110:1-110:3::l0 :: "{v : (List Int) | size v == 0}"
122:1-122:6::empty :: "{v : (List a) | size v == 0}"
122:9-122:22::fixme :: "{v : [Char] | false} -> a"
122:15-122:22::lq_anf$ :: "[Char]"
125:1-125:4::add :: "a -> x2:(List a) -> {v : (List a) | size v == 1 + size x2}"
125:5-125:6::x :: "a"
125:7-125:9::xs :: "(List a)"
125:12-125:23::fixme :: "{v : [Char] | false} -> a"
125:18-125:23::lq_anf$ :: "[Char]"
128:1-128:10::singleton :: "a -> {v : (List a) | size v == 1}"
128:11-128:12::x :: "a"
128:15-128:32::fixme :: "{v : [Char] | false} -> a"
128:21-128:32::lq_anf$ :: "[Char]"
140:1-140:10::replicate :: "Int -> a -> (List a)"
140:13-140:30::fixme :: "{v : [Char] | false} -> a"
140:19-140:30::lq_anf$ :: "[Char]"
147:1-147:15::prop_replicate :: "{v : Int | v >= 0} -> a -> {v : Bool | Prop v}"
147:16-147:17::n :: "{v : Int | v >= 0}"
147:18-147:19::x :: "a"
147:22-147:29::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
147:31-147:58::lq_anf$ :: "Bool"
147:33-147:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
147:36-147:58::lq_anf$ :: "{v : Int | v >= 0}"
147:44-147:55::_ :: "{VV : a | VV == x\n          && VV >= x\n          && VV <= x} -> (List {VV : a | VV == x\n                                         && VV >= x\n                                         && VV <= x})"
158:1-158:4::map :: "(a -> b) -> (List a) -> (List b)"
158:5-158:6::f :: "a -> b"
159:20-159:21::_ :: "{v : a -> b | v == f}"
159:28-159:33::map :: "(a -> b) -> (List a) -> (List b)"
159:32-159:33::f :: "{v : a -> b | v == f}"
162:1-162:9::prop_map :: "(b -> a) -> (List b) -> {v : Bool | Prop v}"
162:10-162:11::f :: "a -> b"
162:12-162:14::xs :: "(List a)"
162:17-162:24::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
162:26-162:35::lq_anf$ :: "{v : Int | v >= 0}"
162:36-162:38::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
162:39-162:56::lq_anf$ :: "{v : Int | v >= 0}"
162:47-162:52::map :: "(a -> b) -> (List a) -> (List b)"
162:51-162:52::f :: "{v : a -> b | v == f}"
173:1-173:7::foldr1 :: "(a -> a -> a) -> (List a) -> a"
173:8-173:10::op :: "a -> a -> a"
173:24-173:32::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
173:30-173:32::op :: "{v : a -> a -> a | v == op}"
174:24-174:64::die :: "{v : [Char] | false} -> a"
174:28-174:64::lq_anf$ :: "[Char]"
177:1-177:6::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
177:10-177:11::b :: "a"
178:25-178:47::x :: "{VV : a | VV == x}"
178:27-178:31::_ :: "a -> b -> b"
178:33-178:41::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
178:39-178:41::ds_d1E1 :: "a -> b -> b"
191:1-191:8::zipWith :: "(a -> b -> c) -> (List a) -> (List b) -> (List c)"
192:35-192:36::_ :: "a -> b -> c"
192:45-192:54::zipWith :: "(a -> b -> c) -> (List a) -> (List b) -> (List c)"
192:53-192:54::ds_d1DW :: "a -> b -> c"
193:35-193:61::die :: "{v : [Char] | false} -> a"
193:40-193:61::lq_anf$ :: "[Char]"
196:1-196:13::prop_zipWith :: "(Num a) => (List a) -> {v : Bool | Prop v}"
196:14-196:16::xs :: "(List a)"
196:19-196:26::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
196:28-196:37::lq_anf$ :: "{v : Int | v >= 0}"
196:38-196:40::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
196:41-196:51::lq_anf$ :: "{v : Int | v >= 0}"
198:5-198:8::x2s :: "(List a)"
198:19-198:30::zipWith :: "(a -> b -> c) -> (List a) -> (List b) -> (List c)"
198:27-198:30::lq_anf$ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
212:1-212:7::concat :: "(List (List a)) -> (List a)"
212:10-212:24::fixme :: "{v : [Char] | false} -> a"
212:16-212:24::lq_anf$ :: "[Char]"
214:1-214:12::prop_concat :: "Bool"
214:15-214:22::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
214:24-214:43::lq_anf$ :: "{v : Int | v >= 0}"
214:32-214:42::lq_anf$ :: "(List Int)"
214:44-214:46::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
216:5-216:8::xss :: "(List (List Int))"