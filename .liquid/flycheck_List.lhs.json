{"status":"unsafe","types":{"174":{"28":{"ann":"[Char]","ident":"lq_anf$","row":174,"col":28},"24":{"ann":"{v : [Char] | false} -> a","ident":"die","row":174,"col":24}},"173":{"30":{"ann":"{v : a -> a -> a | v == op}","ident":"op","row":173,"col":30},"1":{"ann":"(a -> a -> a) -> (List a) -> a","ident":"foldr1","row":173,"col":1},"8":{"ann":"a -> a -> a","ident":"op","row":173,"col":8},"24":{"ann":"(a -> b -> b) -> b -> (List a) -> b","ident":"foldr","row":173,"col":24}},"216":{"5":{"ann":"(List (List Int))","ident":"xss","row":216,"col":5}},"101":{"1":{"ann":"{v : (List Int) | size v == 3}","ident":"l3","row":101,"col":1}},"128":{"15":{"ann":"{v : [Char] | false} -> a","ident":"fixme","row":128,"col":15},"1":{"ann":"a -> {v : (List a) | size v == 1}","ident":"singleton","row":128,"col":1},"11":{"ann":"a","ident":"x","row":128,"col":11},"21":{"ann":"[Char]","ident":"lq_anf$","row":128,"col":21}},"90":{"25":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":90,"col":25},"23":{"ann":"x1:Int -> x2:Int -> {v : Int | v == x1 + x2}","ident":"_","row":90,"col":23},"21":{"ann":"{v : Int | v == (1 : int)}","ident":"lq_anf$","row":90,"col":21}},"89":{"1":{"ann":"(List a) -> {VV : Int | VV >= 0}","ident":"length","row":89,"col":1}},"191":{"1":{"ann":"(a -> b -> c) -> (List a) -> (List b) -> (List c)","ident":"zipWith","row":191,"col":1}},"1":{"1":{"ann":"(List a) -> Int#","ident":"$con2tag_rVm","row":1,"col":1}},"122":{"15":{"ann":"[Char]","ident":"lq_anf$","row":122,"col":15},"1":{"ann":"{v : (List a) | size v == 0}","ident":"empty","row":122,"col":1},"9":{"ann":"{v : [Char] | false} -> a","ident":"fixme","row":122,"col":9}},"158":{"1":{"ann":"(a -> b) -> (List a) -> (List b)","ident":"map","row":158,"col":1},"5":{"ann":"a -> b","ident":"f","row":158,"col":5}},"214":{"15":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":214,"col":15},"44":{"ann":"x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":214,"col":44},"1":{"ann":"Bool","ident":"prop_concat","row":214,"col":1},"24":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":214,"col":24},"32":{"ann":"(List Int)","ident":"lq_anf$","row":214,"col":32}},"192":{"53":{"ann":"a -> b -> c","ident":"ds_d1DW","row":192,"col":53},"35":{"ann":"a -> b -> c","ident":"_","row":192,"col":35},"45":{"ann":"(a -> b -> c) -> (List a) -> (List b) -> (List c)","ident":"zipWith","row":192,"col":45}},"147":{"31":{"ann":"Bool","ident":"lq_anf$","row":147,"col":31},"36":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":147,"col":36},"22":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":147,"col":22},"44":{"ann":"{VV : a | VV == x\n          && VV >= x\n          && VV <= x} -> (List {VV : a | VV == x\n                                         && VV >= x\n                                         && VV <= x})","ident":"_","row":147,"col":44},"1":{"ann":"{v : Int | v >= 0} -> a -> {v : Bool | Prop v}","ident":"prop_replicate","row":147,"col":1},"18":{"ann":"a","ident":"x","row":147,"col":18},"16":{"ann":"{v : Int | v >= 0}","ident":"n","row":147,"col":16},"33":{"ann":"x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":147,"col":33}},"162":{"51":{"ann":"{v : a -> b | v == f}","ident":"f","row":162,"col":51},"36":{"ann":"x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":162,"col":36},"12":{"ann":"(List a)","ident":"xs","row":162,"col":12},"17":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":162,"col":17},"1":{"ann":"(b -> a) -> (List b) -> {v : Bool | Prop v}","ident":"prop_map","row":162,"col":1},"26":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":162,"col":26},"39":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":162,"col":39},"47":{"ann":"(a -> b) -> (List a) -> (List b)","ident":"map","row":162,"col":47},"10":{"ann":"a -> b","ident":"f","row":162,"col":10}},"104":{"1":{"ann":"{v : (List Int) | size v == 2}","ident":"l2","row":104,"col":1}},"159":{"28":{"ann":"(a -> b) -> (List a) -> (List b)","ident":"map","row":159,"col":28},"20":{"ann":"{v : a -> b | v == f}","ident":"_","row":159,"col":20},"32":{"ann":"{v : a -> b | v == f}","ident":"f","row":159,"col":32}},"140":{"13":{"ann":"{v : [Char] | false} -> a","ident":"fixme","row":140,"col":13},"19":{"ann":"[Char]","ident":"lq_anf$","row":140,"col":19},"1":{"ann":"Int -> a -> (List a)","ident":"replicate","row":140,"col":1}},"198":{"19":{"ann":"(a -> b -> c) -> (List a) -> (List b) -> (List c)","ident":"zipWith","row":198,"col":19},"5":{"ann":"(List a)","ident":"x2s","row":198,"col":5},"27":{"ann":"x1:a -> x2:a -> {VV : a | VV == x1 + x2}","ident":"lq_anf$","row":198,"col":27}},"110":{"1":{"ann":"{v : (List Int) | size v == 0}","ident":"l0","row":110,"col":1}},"55":{"25":{"ann":"(Eq a) => (Eq (List a))","ident":"$fEqList","row":55,"col":25},"29":{"ann":"(Eq (List a), Ord a) => (Ord (List a))","ident":"$fOrdList","row":55,"col":29},"34":{"ann":"(Show a) => (Show (List a))","ident":"$fShowList","row":55,"col":34}},"193":{"35":{"ann":"{v : [Char] | false} -> a","ident":"die","row":193,"col":35},"40":{"ann":"[Char]","ident":"lq_anf$","row":193,"col":40}},"196":{"28":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":196,"col":28},"14":{"ann":"(List a)","ident":"xs","row":196,"col":14},"19":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":196,"col":19},"1":{"ann":"(Num a) => (List a) -> {v : Bool | Prop v}","ident":"prop_zipWith","row":196,"col":1},"41":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":196,"col":41},"38":{"ann":"x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":196,"col":38}},"107":{"1":{"ann":"{v : (List Int) | size v == 1}","ident":"l1","row":107,"col":1}},"125":{"7":{"ann":"(List a)","ident":"xs","row":125,"col":7},"12":{"ann":"{v : [Char] | false} -> a","ident":"fixme","row":125,"col":12},"1":{"ann":"a -> x2:(List a) -> {v : (List a) | size v == 1 + size x2}","ident":"add","row":125,"col":1},"18":{"ann":"[Char]","ident":"lq_anf$","row":125,"col":18},"5":{"ann":"a","ident":"x","row":125,"col":5}},"178":{"25":{"ann":"{VV : a | VV == x}","ident":"x","row":178,"col":25},"39":{"ann":"a -> b -> b","ident":"ds_d1E1","row":178,"col":39},"27":{"ann":"a -> b -> b","ident":"_","row":178,"col":27},"33":{"ann":"(a -> b -> b) -> b -> (List a) -> b","ident":"foldr","row":178,"col":33}},"177":{"1":{"ann":"(a -> b -> b) -> b -> (List a) -> b","ident":"foldr","row":177,"col":1},"10":{"ann":"a","ident":"b","row":177,"col":10}},"212":{"1":{"ann":"(List (List a)) -> (List a)","ident":"concat","row":212,"col":1},"16":{"ann":"[Char]","ident":"lq_anf$","row":212,"col":16},"10":{"ann":"{v : [Char] | false} -> a","ident":"fixme","row":212,"col":10}},"98":{"14":{"ann":"{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}","ident":"_","row":98,"col":14},"1":{"ann":"{v : Bool | Prop v}","ident":"prop_size","row":98,"col":1},"23":{"ann":"{v : Int | v >= 0}","ident":"lq_anf$","row":98,"col":23},"33":{"ann":"x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}","ident":"_","row":98,"col":33}}},"errors":[{"start":{"line":162,"column":26},"stop":{"line":162,"column":56},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:162:26-55: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?b}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Types.Int | ?c >= 0}\n\n    ?b := {?b : GHC.Types.Bool | Prop ?b <=> ?c == ?a}\n\n    ?a := {?a : GHC.Types.Int | ?a >= 0}"},{"start":{"line":140,"column":19},"stop":{"line":140,"column":30},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:140:19-29: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?a\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : GHC.Prim.Addr# | ?b ~~ \"replicate\"\n                                 && strLen ?b == 9}\n\n    ?a := {?a : [GHC.Types.Char] | ?a ~~ ?b\n                                   && len ?a == strLen ?b\n                                   && len ?a >= 0}"},{"start":{"line":193,"column":40},"stop":{"line":193,"column":61},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:193:40-60: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"Bad call to zipWith\"\n                                 && strLen ?a == 19}"},{"start":{"line":196,"column":28},"stop":{"line":196,"column":51},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:196:28-50: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?a}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Types.Int | ?c >= 0}\n\n    ?b := {?b : GHC.Types.Int | ?b >= 0}\n\n    ?a := {?a : GHC.Types.Bool | Prop ?a <=> ?b == ?c}"},{"start":{"line":193,"column":40},"stop":{"line":193,"column":61},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:193:40-60: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"Bad call to zipWith\"\n                                 && strLen ?a == 19}"},{"start":{"line":98,"column":23},"stop":{"line":98,"column":37},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:98:23-36: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?a}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Types.Int | ?c == (3 : int)}\n\n    ?b := {?b : GHC.Types.Int | ?b >= 0}\n\n    ?a := {?a : GHC.Types.Bool | Prop ?a <=> ?b == ?c}"},{"start":{"line":212,"column":16},"stop":{"line":212,"column":24},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:212:16-23: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"concat\"\n                                 && strLen ?a == 6}"},{"start":{"line":174,"column":28},"stop":{"line":174,"column":64},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:174:28-63: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"Cannot call foldr1 with empty list\"\n                                 && strLen ?a == 34}"},{"start":{"line":122,"column":15},"stop":{"line":122,"column":22},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:122:15-21: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"empty\"\n                                 && strLen ?a == 5}"},{"start":{"line":214,"column":24},"stop":{"line":214,"column":48},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:214:24-47: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?c}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    ?c := {?c : GHC.Types.Bool | Prop ?c <=> ?a == ?b}\n\n    ?b := {?b : GHC.Types.Int | ?b == (6 : int)}\n\n    ?a := {?a : GHC.Types.Int | ?a >= 0}"},{"start":{"line":147,"column":31},"stop":{"line":147,"column":58},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:147:31-57: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Bool | VV == ?b}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Bool | Prop VV}\n \n  In Context\n    n := {n : GHC.Types.Int | n >= 0}\n\n    ?b := {?b : GHC.Types.Bool | Prop ?b <=> n == ?a}\n\n    ?a := {?a : GHC.Types.Int | ?a >= 0}"},{"start":{"line":125,"column":18},"stop":{"line":125,"column":23},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:125:18-22: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"add\"\n                                 && strLen ?a == 3}"},{"start":{"line":128,"column":21},"stop":{"line":128,"column":32},"message":"/home/cse230/Desktop/Hw4/flycheck_List.lhs:128:21-31: Error: Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?b\n                                  && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    ?b := {?b : [GHC.Types.Char] | ?b ~~ ?a\n                                   && len ?b == strLen ?a\n                                   && len ?b >= 0}\n\n    ?a := {?a : GHC.Prim.Addr# | ?a ~~ \"singleton\"\n                                 && strLen ?a == 9}"}]}