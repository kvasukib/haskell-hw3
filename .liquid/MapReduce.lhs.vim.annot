25:1-25:10::MapReduce.mapReduce :: "(GHC.Classes.Ord b) =>\n(a -> (List.List (b, c))) -> (c -> c -> c) -> (List.List a) -> (Data.Map.Base.Map b c)"
25:11-25:13::fm :: "a -> (List.List (b, c))"
25:14-25:16::fr :: "a -> a -> a"
25:17-25:19::xs :: "(List.List a)"
27:5-27:8::kvs :: "(List.List (a, b))"
27:13-27:27::_ :: "(List.List a) -> (List.List (b, c))"
27:25-27:27::fm :: "{v : a -> (List.List (b, c)) | v == fm}"
28:5-28:9::kvsm :: "(Data.Map.Base.Map a {v : (List.List b) | size v > 0})"
28:13-28:18::_ :: "(List.List (a, b)) -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0})"
29:5-29:8::kvm :: "(Data.Map.Base.Map a b)"
29:13-29:24::_ :: "(Data.Map.Base.Map a {v : (List.List b) | size v > 0}) -> (Data.Map.Base.Map a b)"
29:22-29:24::fr :: "{v : a -> a -> a | v == fr}"
49:1-49:7::MapReduce.expand :: "(a -> (List.List (b, c))) -> (List.List a) -> (List.List (b, c))"
49:8-49:9::f :: "a -> (List.List (b, c))"
49:10-49:12::xs :: "(List.List a)"
49:15-49:32::List.concat :: "x1:(List.List (List.List a)) -> {v : (List.List a) | size v == sizeN x1}"
49:23-49:28::_ :: "x1:(List.List a) -> {v : (List.List (List.List (b, c))) | size v == size x1}"
49:27-49:28::f :: "{v : a -> (List.List (b, c)) | v == f}"
59:1-59:6::MapReduce.group :: "(GHC.Classes.Ord a) =>\n(List.List (a, b)) -> (Data.Map.Base.Map a {vs : (List.List b) | size vs > 0})"
59:13-59:24::_ :: "(Data.Map.Base.Map a {v : (List.List b) | size v > 0}) -> (List.List (a, b)) -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0})"
59:19-59:24::lq_anf$ :: "(a, b) -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0}) -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0})"
61:1-61:6::MapReduce.addKV :: "(GHC.Classes.Ord b) =>\n(b, a) -> (Data.Map.Base.Map b {VV : (List.List a) | size VV > 0}) -> (Data.Map.Base.Map b {VV : (List.List a) | size VV > 0})"
61:13-61:14::m :: "(Data.Map.Base.Map a {VV : (List.List b) | size VV > 0})"
61:17-61:25::_ :: "a -> {v : (List.List b) | size v > 0} -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0}) -> (Data.Map.Base.Map a {v : (List.List b) | size v > 0})"
63:5-63:8::vs' :: "(List.List a)"
63:17-63:22::_ :: "x1:(List.List a) -> {v : (List.List a) | size v == 1 + size x1}"
63:24-63:41::_ :: "(List.List a) -> b -> (Data.Map.Base.Map b (List.List a)) -> (List.List a)"
73:1-73:9::MapReduce.collapse :: "(a -> a -> a) -> (Data.Map.Base.Map b {vs : (List.List a) | size vs > 0}) -> (Data.Map.Base.Map b a)"
73:10-73:11::f :: "a -> a -> a"
73:14-73:30::Data.Map.Base.map :: "(a -> b) -> (Data.Map.Base.Map c a) -> (Data.Map.Base.Map c b)"
73:21-73:29::lq_anf$ :: "{v : (List.List a) | size v > 0} -> a"
73:28-73:29::f :: "{v : a -> a -> a | v == f}"
76:1-76:7::MapReduce.toList :: "(Data.Map.Base.Map a b) -> (List.List (a, b))"
76:10-76:53::lq_anf$ :: "a -> b -> (List.List (a, b)) -> (List.List (a, b))"
76:27-76:28::k :: "a"
76:29-76:30::v :: "a"
76:31-76:34::acc :: "(List.List (a, b))"
76:38-76:48::lq_anf$ :: "{v' : (a, b) | snd v' == v\n               && fst v' == k\n               && x_Tuple22 v' == v\n               && x_Tuple21 v' == k}"