1:1-1:1::$con2tag_rVm :: "(List a) -> Int#"
55:25-55:27::$fEqList :: "(Eq a) => (Eq (List a))"
55:29-55:32::$fOrdList :: "(Eq (List a), Ord a) => (Ord (List a))"
55:34-55:38::$fShowList :: "(Show a) => (Show (List a))"
89:1-89:7::length :: "x1:(List a) -> {v : Int | v >= 0\n                          && v == size x1}"
90:21-90:34::lq_anf$ :: "{v : Int | v == (1 : int)}"
90:23-90:24::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
90:25-90:34::lq_anf$ :: "{v : Int | v >= 0\n           && v == size xs}"
98:1-98:10::prop_size :: "{v : Bool | Prop v}"
98:14-98:21::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
98:23-98:32::lq_anf$ :: "{v : Int | v >= 0\n           && v == size List.l3}"
98:33-98:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
101:1-101:3::l3 :: "{v : (List Int) | size v == 3}"
104:1-104:3::l2 :: "{v : (List Int) | size v == 2}"
107:1-107:3::l1 :: "{v : (List Int) | size v == 1}"
110:1-110:3::l0 :: "{v : (List Int) | size v == 0}"
122:1-122:6::empty :: "{v : (List a) | size v == 0}"
125:1-125:4::add :: "a -> x2:(List a) -> {v : (List a) | size v == 1 + size x2}"
125:5-125:6::x :: "a"
125:7-125:9::xs :: "(List a)"
128:1-128:10::singleton :: "a -> {v : (List a) | size v == 1}"
128:11-128:12::x :: "a"
140:1-140:10::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
141:17-141:22::_ :: "x1:(List a) -> {v : (List a) | size v == 1 + size x1}"
141:24-141:39::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
141:35-141:38::lq_anf$ :: "Int"
141:36-141:37::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
148:1-148:15::prop_replicate :: "{v : Int | v >= 0} -> a -> {v : Bool | Prop v}"
148:16-148:17::n :: "{v : Int | v >= 0}"
148:18-148:19::x :: "a"
148:22-148:29::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
148:31-148:58::lq_anf$ :: "Bool"
148:33-148:35::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
148:36-148:58::lq_anf$ :: "{v : Int | v >= 0}"
148:44-148:55::replicate :: "x1:Int -> a -> {v : (List a) | size v == x1}"
159:1-159:4::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
159:5-159:6::f :: "a -> b"
160:20-160:21::_ :: "{v : a -> b | v == f}"
160:28-160:33::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
160:32-160:33::f :: "{v : a -> b | v == f}"
163:1-163:9::prop_map :: "(b -> a) -> (List b) -> {v : Bool | Prop v}"
163:10-163:11::f :: "a -> b"
163:12-163:14::xs :: "(List a)"
163:17-163:24::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
163:26-163:35::lq_anf$ :: "{v : Int | v >= 0\n           && v == size xs}"
163:36-163:38::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
163:39-163:56::lq_anf$ :: "{v : Int | v >= 0}"
163:47-163:52::map :: "(a -> b) -> x3:(List a) -> {v : (List b) | size v == size x3}"
163:51-163:52::f :: "{v : a -> b | v == f}"
174:1-174:7::foldr1 :: "(a -> a -> a) -> {as : (List a) | size as > 0} -> a"
174:8-174:10::op :: "a -> a -> a"
174:24-174:32::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
174:30-174:32::op :: "{v : a -> a -> a | v == op}"
175:24-175:64::die :: "{v : [Char] | false} -> a"
175:28-175:64::lq_anf$ :: "[Char]"
178:1-178:6::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
178:10-178:11::b :: "a"
179:25-179:47::x :: "{VV : a | VV == x}"
179:27-179:31::_ :: "a -> b -> b"
179:33-179:41::foldr :: "(a -> b -> b) -> b -> (List a) -> b"
179:39-179:41::ds_d1G5 :: "a -> b -> b"
192:1-192:8::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
193:35-193:36::_ :: "a -> b -> c"
193:45-193:54::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
193:53-193:54::ds_d1G0 :: "a -> b -> c"
194:35-194:61::die :: "{v : [Char] | false} -> a"
194:40-194:61::lq_anf$ :: "[Char]"
197:1-197:13::prop_zipWith :: "(Num a) => (List a) -> {v : Bool | Prop v}"
197:14-197:16::xs :: "(List a)"
197:19-197:26::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
197:28-197:37::lq_anf$ :: "{v : Int | v >= 0\n           && v == size xs}"
197:38-197:40::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
197:41-197:51::lq_anf$ :: "{v : Int | v >= 0\n           && v == size x2s}"
199:5-199:8::x2s :: "{v : (List a) | size v == size xs}"
199:19-199:30::zipWith :: "(a -> b -> c) -> x4:(List a) -> {v : (List b) | size v == size x4} -> {v : (List c) | size v == size x4}"
199:27-199:30::lq_anf$ :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
213:1-213:7::append :: "x1:(List a) -> x2:(List a) -> {cs : (List a) | size cs == size x1 + size x2}"
213:19-213:21::bs :: "(List a)"
214:31-214:45::lq_anf$ :: "{v : (List a) | size v == size as + size bs}"
214:34-214:42::append :: "x1:(List a) -> x2:(List a) -> {cs : (List a) | size cs == size x1 + size x2}"
221:1-221:7::concat :: "x1:(List (List a)) -> {v : (List a) | size v == sizeN x1}"
222:21-222:41::append :: "x1:(List a) -> x2:(List a) -> {cs : (List a) | size cs == size x1 + size x2}"
222:32-222:41::lq_anf$ :: "{v : (List a) | size v == sizeN as}"
224:1-224:12::prop_concat :: "Bool"
224:15-224:22::_ :: "{v : {v : Bool | Prop v} -> {v : Bool | Prop v} | v == Assert.lAssert}"
224:24-224:43::lq_anf$ :: "{v : Int | v >= 0}"
224:32-224:42::lq_anf$ :: "{v : (List Int) | size v == sizeN xss}"
224:44-224:46::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == x2}"
226:5-226:8::xss :: "(List (List Int))"