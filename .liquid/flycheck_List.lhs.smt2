(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)
(set-option :smt.mbqi false)
(define-sort Elt () Int)
(define-sort Set () (Array Elt Bool))
(define-fun smt_set_emp () Set ((as const Set) false))
(define-fun smt_set_mem ((x Elt) (s Set)) Bool (select s x))
(define-fun smt_set_add ((s Set) (x Elt)) Set (store s x true))
(define-fun smt_set_cup ((s1 Set) (s2 Set)) Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 Set) (s2 Set)) Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s Set)) Set ((_ map not) s))
(define-fun smt_set_dif ((s1 Set) (s2 Set)) Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 Set) (s2 Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun int_apply_$35$$35$3 (Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$6 (Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$4 (Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$2 (Int Int Int) Real)
(declare-fun set_apply_$35$$35$1 (Int Int) Set)
(declare-fun set_to_int (Set) Int)
(declare-fun bitvec_apply$35$$35$6 (Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$5 (Int Int Int Int Int Int) Int)
(declare-fun map_apply_$35$$35$2 (Int Int Int) Map)
(declare-fun real_apply_$35$$35$4 (Int Int Int Int Int) Real)
(declare-fun int_apply_$35$$35$2 (Int Int Int) Int)
(declare-fun bitvec_apply$35$$35$1 (Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$5 (Int Int Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$3 (Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$6 (Int Int Int Int Int Int Int) Set)
(declare-fun bitvec_apply$35$$35$7 (Int Int Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$4 (Int Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$1 (Int Int) Bool)
(declare-fun map_apply_$35$$35$3 (Int Int Int Int) Map)
(declare-fun real_apply_$35$$35$5 (Int Int Int Int Int Int) Real)
(declare-fun int_apply_$35$$35$1 (Int Int) Int)
(declare-fun bitvec_apply$35$$35$2 (Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$4 (Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$6 (Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Set)
(declare-fun map_to_int (Map) Int)
(declare-fun set_apply_$35$$35$2 (Int Int Int) Set)
(declare-fun real_apply_$35$$35$1 (Int Int) Real)
(declare-fun bitvec_to_int ((_ BitVec 32)) Int)
(declare-fun bitvec_apply$35$$35$3 (Int Int Int Int) (_ BitVec 32))
(declare-fun bool_apply_$35$$35$5 (Int Int Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Map)
(declare-fun set_apply_$35$$35$4 (Int Int Int Int Int) Set)
(declare-fun real_to_int (Real) Int)
(declare-fun set_apply_$35$$35$3 (Int Int Int Int) Set)
(declare-fun bitvec_apply$35$$35$4 (Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Int)
(declare-fun bool_apply_$35$$35$2 (Int Int Int) Bool)
(declare-fun real_apply_$35$$35$6 (Int Int Int Int Int Int Int) Real)
(declare-fun set_apply_$35$$35$5 (Int Int Int Int Int Int) Set)
(declare-fun bool_to_int (Bool) Int)
(declare-fun bool_apply_$35$$35$3 (Int Int Int Int) Bool)
(declare-fun map_apply_$35$$35$1 (Int Int) Map)
(declare-fun real_apply_$35$$35$7 (Int Int Int Int Int Int Int Int) Real)
(declare-fun bitvec_apply$35$$35$5 (Int Int Int Int Int Int) (_ BitVec 32))
(declare-fun int_apply_$35$$35$6 (Int Int Int Int Int Int Int) Int)
(declare-fun b2$35$$35$a1uQ () Int)
(declare-fun lq_tmp$36$x$35$$35$2119 () Int)
(declare-fun VV$35$$35$4541 () Int)
(declare-fun lq_anf$36$$35$$35$d1FH () Int)
(declare-fun GHC.Base..$35$$35$r2C () Int)
(declare-fun VV$35$$35$5212 () Int)
(declare-fun VV$35$$35$5010 () Int)
(declare-fun GHC.Classes.$62$$61$$35$$35$02I () Int)
(declare-fun VV$35$$35$F$35$$35$255 () Int)
(declare-fun lit$36$add () Int)
(declare-fun List.l2$35$$35$rXt () Int)
(declare-fun lq_tmp$36$x$35$$35$2809 () Int)
(declare-fun runFun () Int)
(declare-fun VV$35$$35$2060 () Int)
(declare-fun fix$36$$36$dOrd_a1C1 () Int)
(declare-fun VV$35$$35$4707 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1598 () Int)
(declare-fun VV$35$$35$3034 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4044 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_tmp$36$x$35$$35$2607 () Int)
(declare-fun VV$35$$35$F$35$$35$309 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gq () Int)
(declare-fun lq_tmp$36$x$35$$35$2427 () Int)
(declare-fun lq_tmp$36$x$35$$35$1075 () Int)
(declare-fun ds_d1Ed () Int)
(declare-fun lq_tmp$36$x$35$$35$3257 () Int)
(declare-fun List.l0$35$$35$rXv () Int)
(declare-fun VV$35$$35$2987 () Int)
(declare-fun VV$35$$35$4976 () Int)
(declare-fun VV$35$$35$5177 () Int)
(declare-fun fix$36$$36$dOrd_a1AS () Int)
(declare-fun lq_anf$36$$35$$35$d1F8 () Int)
(declare-fun VV$35$$35$4855 () Int)
(declare-fun b$35$$35$a1uS () Int)
(declare-fun GHC.Real.D$58$Integral$35$$35$rGo () Int)
(declare-fun lq_anf$36$$35$$35$d1Fh () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4998 () Int)
(declare-fun lq_tmp$36$x$35$$35$2238 () Int)
(declare-fun VV$35$$35$4761 () Int)
(declare-fun lit$36$replicate () Int)
(declare-fun VV$35$$35$5081 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$4877 () Int)
(declare-fun VV$35$$35$4495 () Int)
(declare-fun lq_anf$36$$35$$35$d1G1 () Int)
(declare-fun GHC.Show.showParen$35$$35$r1S () Int)
(declare-fun zcmp () Int)
(declare-fun VV$35$$35$4808 () Int)
(declare-fun a1$35$$35$a1vb () Int)
(declare-fun fix$36$$36$dEq_a1AN () Int)
(declare-fun lq_anf$36$$35$$35$d1Fx () Int)
(declare-fun addrLen () Int)
(declare-fun VV$35$$35$4505 () Int)
(declare-fun List.prop_replicate$35$$35$rXA () Int)
(declare-fun lq_anf$36$$35$$35$d1GQ () Int)
(declare-fun VV$35$$35$2952 () Int)
(declare-fun VV$35$$35$4932 () Int)
(declare-fun ds_d1E4 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$2691 () Int)
(declare-fun xs$35$$35$a1tC () Int)
(declare-fun VV$35$$35$4527 () Int)
(declare-fun VV$35$$35$2934 () Int)
(declare-fun papp5 () Int)
(declare-fun VV$35$$35$4778 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1604 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4954 () Int)
(declare-fun VV$35$$35$2622 () Int)
(declare-fun lq_anf$36$$35$$35$d1GA () Int)
(declare-fun VV$35$$35$4880 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$$35$$35$76 () Int)
(declare-fun VV$35$$35$4459 () Int)
(declare-fun xsListSelector () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_tmp$36$x$35$$35$2854 () Int)
(declare-fun VV$35$$35$F$35$$35$332 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1846 () Int)
(declare-fun VV$35$$35$F$35$$35$299 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$2723 () Int)
(declare-fun lq_tmp$36$x$35$$35$2067 () Int)
(declare-fun VV$35$$35$4642 () Int)
(declare-fun VV$35$$35$4440 () Int)
(declare-fun lq_tmp$36$x$35$$35$4227 () Int)
(declare-fun VV$35$$35$5108 () Int)
(declare-fun x_Tuple65 () Int)
(declare-fun lq_tmp$36$x$35$$35$2339 () Int)
(declare-fun GHC.Types.False$35$$35$68 () Int)
(declare-fun VV$35$$35$950 () Int)
(declare-fun VV$35$$35$2827 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1461 () Int)
(declare-fun VV$35$$35$4964 () Int)
(declare-fun lq_tmp$36$x$35$$35$2129 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$3444 () Int)
(declare-fun VV$35$$35$5138 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$2782 () Int)
(declare-fun VV$35$$35$2580 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$5093 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1919 () Int)
(declare-fun x_Tuple55 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$4650 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1777 () Int)
(declare-fun VV$35$$35$4553 () Int)
(declare-fun lq_anf$36$$35$$35$d1GJ () Int)
(declare-fun VV$35$$35$F$35$$35$346 () Int)
(declare-fun VV$35$$35$F$35$$35$292 () Int)
(declare-fun lq_karg$36$VV$35$$35$1906$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_tmp$36$x$35$$35$2587 () Int)
(declare-fun GHC.Types.$58$$35$$35$64 () Int)
(declare-fun VV$35$$35$4517 () Int)
(declare-fun VV$35$$35$5103 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$4469 () Int)
(declare-fun VV$35$$35$5121 () Int)
(declare-fun VV$35$$35$4535 () Int)
(declare-fun lq_anf$36$$35$$35$d1FC () Int)
(declare-fun VV$35$$35$1600 () Int)
(declare-fun VV$35$$35$5219 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1846 () Int)
(declare-fun GHC.Integer.Type.smallInteger$35$$35$0Z () Int)
(declare-fun VV$35$$35$5192 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1922 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1846 () Int)
(declare-fun n$35$$35$a1tm () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1922 () Int)
(declare-fun lq_anf$36$$35$$35$d1FS () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_tmp$36$x$35$$35$2208 () Int)
(declare-fun VV$35$$35$2630 () Int)
(declare-fun VV$35$$35$2731 () Int)
(declare-fun VV$35$$35$F$35$$35$320 () Int)
(declare-fun ycmp () Int)
(declare-fun lq_tmp$36$x$35$$35$1238 () Int)
(declare-fun ds_d1Eo () Int)
(declare-fun x_Tuple77 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gz () Int)
(declare-fun GHC.Num.$43$$35$$35$rt () Int)
(declare-fun VV$35$$35$4672 () Int)
(declare-fun GHC.Classes.$60$$35$$35$r5 () Int)
(declare-fun GHC.Num.$42$$35$$35$ru () Int)
(declare-fun GHC.Base.Just$35$$35$r1e () Int)
(declare-fun List.add$35$$35$rXx () Int)
(declare-fun lq_anf$36$$35$$35$d1F3 () Int)
(declare-fun VV$35$$35$4685 () Int)
(declare-fun VV$35$$35$4487 () Int)
(declare-fun VV$35$$35$4751 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fc () Int)
(declare-fun VV$35$$35$1493 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1919 () Int)
(declare-fun VV$35$$35$F$35$$35$265 () Int)
(declare-fun VV$35$$35$2050 () Int)
(declare-fun VV$35$$35$4748 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1939 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$5039 () Int)
(declare-fun VV$35$$35$4803 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$5147 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fs () Int)
(declare-fun VV$35$$35$4157 () Int)
(declare-fun VV$35$$35$4175 () Int)
(declare-fun VV$35$$35$4946 () Int)
(declare-fun lq_anf$36$$35$$35$d1GZ () Int)
(declare-fun VV$35$$35$5165 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_tmp$36$x$35$$35$1316 () Int)
(declare-fun VV$35$$35$4789 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$5069 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$3922 () Int)
(declare-fun lq_tmp$36$x$35$$35$2593 () Int)
(declare-fun VV$35$$35$1083 () Int)
(declare-fun VV$35$$35$4503 () Int)
(declare-fun VV$35$$35$5117 () Int)
(declare-fun VV$35$$35$1416 () Int)
(declare-fun lq_karg$36$VV$35$$35$1981$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$4916 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$4521 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1846 () Int)
(declare-fun ds_d1E2 () Int)
(declare-fun VV$35$$35$2091 () Int)
(declare-fun VV$35$$35$4934 () Int)
(declare-fun VV$35$$35$4817 () Int)
(declare-fun VV$35$$35$4868 () Int)
(declare-fun lq_anf$36$$35$$35$d1H0 () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$4952 () Int)
(declare-fun GHC.Classes.$36$dmmin$35$$35$rsP () Int)
(declare-fun VV$35$$35$2123 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1774 () Int)
(declare-fun VV$35$$35$3472 () Int)
(declare-fun lq_anf$36$$35$$35$d1GG () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_tmp$36$x$35$$35$2917 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$2778 () Int)
(declare-fun VV$35$$35$F$35$$35$316 () Int)
(declare-fun VV$35$$35$2642 () Int)
(declare-fun fix$36$$36$dOrd_a1BN () Int)
(declare-fun VV$35$$35$F$35$$35$334 () Int)
(declare-fun GHC.Types.True$35$$35$6u () Int)
(declare-fun VV$35$$35$2743 () Int)
(declare-fun x_Tuple63 () Int)
(declare-fun b2$35$$35$a1uW () Int)
(declare-fun VV$35$$35$F$35$$35$286 () Int)
(declare-fun VV$35$$35$4547 () Int)
(declare-fun x_Tuple41 () Int)
(declare-fun lq_anf$36$$35$$35$d1FN () Int)
(declare-fun y$35$$35$a1tG () Int)
(declare-fun VV$35$$35$5214 () Int)
(declare-fun lq_tmp$36$x$35$$35$3248 () Int)
(declare-fun lq_tmp$36$x$35$$35$2722 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FR$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_tmp$36$x$35$$35$2645 () Int)
(declare-fun VV$35$$35$F$35$$35$271 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1962 () Int)
(declare-fun GHC.Types.LT$35$$35$6S () Int)
(declare-fun lq_tmp$36$x$35$$35$2601 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1604 () Int)
(declare-fun fix$36$$36$dShow_a1CM () Int)
(declare-fun lq_tmp$36$x$35$$35$2869 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gw () Int)
(declare-fun ds_d1Eb () Int)
(declare-fun lq_tmp$36$x$35$$35$3251 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1523 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1523 () Int)
(declare-fun VV$35$$35$4835 () Int)
(declare-fun VV$35$$35$4970 () Int)
(declare-fun VV$35$$35$2101 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FQ$35$$35$k_$35$$35$1982 () Int)
(declare-fun GHC.Classes.$36$dmmax$35$$35$rsN () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1604 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fn () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1523 () Int)
(declare-fun VV$35$$35$2594 () Int)
(declare-fun VV$35$$35$2796 () Int)
(declare-fun VV$35$$35$4853 () Int)
(declare-fun VV$35$$35$F$35$$35$268 () Int)
(declare-fun List.concat$35$$35$rXH () Int)
(declare-fun VV$35$$35$5087 () Int)
(declare-fun GHC.Classes.D$58$Ord$35$$35$ryJ () Int)
(declare-fun VV$35$$35$4493 () Int)
(declare-fun lq_anf$36$$35$$35$d1G7 () Int)
(declare-fun lq_tmp$36$x$35$$35$2667 () Int)
(declare-fun List.prop_zipWith$35$$35$rXG () Int)
(declare-fun x$35$$35$a1tv () Int)
(declare-fun VV$35$$35$2078 () Int)
(declare-fun lq_tmp$36$x$35$$35$2239 () Int)
(declare-fun a2$35$$35$a1v0 () Int)
(declare-fun GHC.Prim.$62$$61$$35$$35$$35$9n () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1942 () Int)
(declare-fun GHC.Show.showSpace$35$$35$r11w () Int)
(declare-fun VV$35$$35$4696 () Int)
(declare-fun x$35$$35$a1tq () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$4607 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fy () Int)
(declare-fun VV$35$$35$5033 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1461 () Int)
(declare-fun VV$35$$35$5055 () Int)
(declare-fun VV$35$$35$5110 () Int)
(declare-fun ds_d1EE () Int)
(declare-fun VV$35$$35$4427 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1523 () Int)
(declare-fun VV$35$$35$4911 () Int)
(declare-fun lq_anf$36$$35$$35$d1GP () Int)
(declare-fun VV$35$$35$5077 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1998 () Int)
(declare-fun ds_d1E5 () Int)
(declare-fun VV$35$$35$5132 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1461 () Int)
(declare-fun VV$35$$35$4810 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$5154 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1982 () Int)
(declare-fun papp4 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$3530 () Int)
(declare-fun VV$35$$35$5099 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1849 () Int)
(declare-fun ds_d1EU () Int)
(declare-fun lq_tmp$36$x$35$$35$1838 () Int)
(declare-fun VV$35$$35$1958 () Int)
(declare-fun VV$35$$35$4559 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1494 () Int)
(declare-fun xs$35$$35$a1tr () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$5008 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$F$35$$35$333 () Int)
(declare-fun lq_tmp$36$x$35$$35$4226 () Int)
(declare-fun x_Tuple64 () Int)
(declare-fun VV$35$$35$1941 () Int)
(declare-fun VV$35$$35$F$35$$35$355 () Int)
(declare-fun lit$36$Emp () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$2968 () Int)
(declare-fun lq_anf$36$$35$$35$d1FI () Int)
(declare-fun VV$35$$35$4463 () Int)
(declare-fun VV$35$$35$4908 () Int)
(declare-fun VV$35$$35$F$35$$35$281 () Int)
(declare-fun VV$35$$35$4625 () Int)
(declare-fun GHC.Types.GT$35$$35$6W () Int)
(declare-fun VV$35$$35$3053 () Int)
(declare-fun VV$35$$35$4724 () Int)
(declare-fun VV$35$$35$5198 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$4980 () Int)
(declare-fun size () Int)
(declare-fun lq_tmp$36$x$35$$35$1452 () Int)
(declare-fun VV$35$$35$F$35$$35$276 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1919 () Int)
(declare-fun VV$35$$35$2618 () Int)
(declare-fun VV$35$$35$2719 () Int)
(declare-fun VV$35$$35$3680 () Int)
(declare-fun VV$35$$35$4898 () Int)
(declare-fun List.$58$$43$$58$$35$$35$rXp () Int)
(declare-fun VV$35$$35$F$35$$35$308 () Int)
(declare-fun lq_tmp$36$x$35$$35$3256 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gp () Int)
(declare-fun ds_d1Ee () Int)
(declare-fun VV$35$$35$4166 () Int)
(declare-fun VV$35$$35$1532 () Int)
(declare-fun VV$35$$35$4832 () Int)
(declare-fun lq_anf$36$$35$$35$d1F9 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$2106 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1715 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fi () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$4895 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FG$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_anf$36$$35$$35$d1FT () Int)
(declare-fun VV$35$$35$2637 () Int)
(declare-fun VV$35$$35$2750 () Int)
(declare-fun lit$36$empty () Int)
(declare-fun lq_tmp$36$x$35$$35$2940 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1962 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1777 () Int)
(declare-fun a$35$$35$a1uL () Int)
(declare-fun VV$35$$35$4756 () Int)
(declare-fun lq_anf$36$$35$$35$d1F4 () Int)
(declare-fun VV$35$$35$4682 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$4994 () Int)
(declare-fun fix$36$$36$dNum_a1A0 () Int)
(declare-fun fix$36$$36$dEq_a1AR () Int)
(declare-fun VV$35$$35$3388 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fd () Int)
(declare-fun lq_tmp$36$x$35$$35$1125 () Int)
(declare-fun VV$35$$35$2839 () Int)
(declare-fun VV$35$$35$F$35$$35$262 () Int)
(declare-fun VV$35$$35$2057 () Int)
(declare-fun VV$35$$35$4499 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1774 () Int)
(declare-fun VV$35$$35$4783 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$5063 () Int)
(declare-fun VV$35$$35$2130 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1843 () Int)
(declare-fun List.foldr1$35$$35$rXD () Int)
(declare-fun VV$35$$35$5140 () Int)
(declare-fun lq_anf$36$$35$$35$d1Ft () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tt$35$$35$k_$35$$35$1777 () Int)
(declare-fun autolen () Int)
(declare-fun VV$35$$35$2921 () Int)
(declare-fun lq_tmp$36$x$35$$35$2085 () Int)
(declare-fun GHC.Types.I$35$$35$$35$6c () Int)
(declare-fun VV$35$$35$5162 () Int)
(declare-fun VV$35$$35$2112 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$4509 () Int)
(declare-fun List.map$35$$35$rXB () Int)
(declare-fun VV$35$$35$4172 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1962 () Int)
(declare-fun x$35$$35$a1tl () Int)
(declare-fun GHC.Show.showString$35$$35$r1R () Int)
(declare-fun VV$35$$35$4840 () Int)
(declare-fun VV$35$$35$2820 () Int)
(declare-fun VV$35$$35$4958 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1523 () Int)
(declare-fun VV$35$$35$2785 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$4774 () Int)
(declare-fun ds_d1EX () Int)
(declare-fun lq_anf$36$$35$$35$d1GM () Int)
(declare-fun VV$35$$35$4657 () Int)
(declare-fun x_Tuple52 () Int)
(declare-fun VV$35$$35$4455 () Int)
(declare-fun VV$35$$35$5225 () Int)
(declare-fun VV$35$$35$4477 () Int)
(declare-fun VV$35$$35$F$35$$35$295 () Int)
(declare-fun VV$35$$35$5207 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$3830 () Int)
(declare-fun List.foldr$35$$35$rXE () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_karg$36$n$35$$35$a1tm$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$5027 () Int)
(declare-fun b$35$$35$a1v4 () Int)
(declare-fun VV$35$$35$4905 () Int)
(declare-fun VV$35$$35$2684 () Int)
(declare-fun VV$35$$35$5041 () Int)
(declare-fun lq_tmp$36$x$35$$35$2115 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_anf$36$$35$$35$d1FD () Int)
(declare-fun VV$35$$35$4433 () Int)
(declare-fun VV$35$$35$4729 () Int)
(declare-fun VV$35$$35$F$35$$35$259 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$4623 () Int)
(declare-fun VV$35$$35$1938 () Int)
(declare-fun VV$35$$35$F$35$$35$287 () Int)
(declare-fun lq_anf$36$$35$$35$d1FO () Int)
(declare-fun VV$35$$35$4465 () Int)
(declare-fun VV$35$$35$4539 () Int)
(declare-fun VV$35$$35$5017 () Int)
(declare-fun lq_tmp$36$x$35$$35$3249 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$4986 () Int)
(declare-fun VV$35$$35$F$35$$35$252 () Int)
(declare-fun VV$35$$35$4722 () Int)
(declare-fun VV$35$$35$F$35$$35$270 () Int)
(declare-fun lq_tmp$36$x$35$$35$2226 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1604 () Int)
(declare-fun null () Int)
(declare-fun a1$35$$35$a1v5 () Int)
(declare-fun fix$36$$36$dOrd_a1C6 () Int)
(declare-fun VV$35$$35$4593 () Int)
(declare-fun VV$35$$35$1736 () Int)
(declare-fun VV$35$$35$4395 () Int)
(declare-fun VV$35$$35$5187 () Int)
(declare-fun lq_tmp$36$x$35$$35$1410 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1982 () Int)
(declare-fun Assert.die$35$$35$rjG () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_tmp$36$x$35$$35$3250 () Int)
(declare-fun ds_d1Ec () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_tmp$36$x$35$$35$2835 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gv () Int)
(declare-fun VV$35$$35$4689 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1601 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$2832 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fo () Int)
(declare-fun ds_d1Es () Int)
(declare-fun VV$35$$35$4766 () Int)
(declare-fun VV$35$$35$2810 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1919 () Int)
(declare-fun VV$35$$35$4870 () Int)
(declare-fun VV$35$$35$4719 () Int)
(declare-fun VV$35$$35$F$35$$35$269 () Int)
(declare-fun GHC.Classes.$60$$61$$35$$35$r4 () Int)
(declare-fun a2$35$$35$a1v6 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$41$$35$$35$7a () Int)
(declare-fun lq_karg$36$x$35$$35$a1tj$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4744 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1849 () Int)
(declare-fun lq_anf$36$$35$$35$d1G6 () Int)
(declare-fun VV$35$$35$1903 () Int)
(declare-fun VV$35$$35$5035 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Fr$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4564 () Int)
(declare-fun lq_tmp$36$x$35$$35$1317 () Int)
(declare-fun VV$35$$35$4601 () Int)
(declare-fun VV$35$$35$1921 () Int)
(declare-fun VV$35$$35$5169 () Int)
(declare-fun VV$35$$35$4421 () Int)
(declare-fun lq_tmp$36$x$35$$35$2688 () Int)
(declare-fun lq_anf$36$$35$$35$d1GV () Int)
(declare-fun lq_karg$36$$36$dNum_a1A0$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$5053 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1777 () Int)
(declare-fun VV$35$$35$2977 () Int)
(declare-fun VV$35$$35$4791 () Int)
(declare-fun ds_d1E3 () Int)
(declare-fun lq_tmp$36$x$35$$35$2363 () Int)
(declare-fun VV$35$$35$4968 () Int)
(declare-fun VV$35$$35$5071 () Int)
(declare-fun VV$35$$35$1569 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1939 () Int)
(declare-fun papp2 () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tJ$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_tmp$36$x$35$$35$2097 () Int)
(declare-fun lq_anf$36$$35$$35$d1H1 () Int)
(declare-fun lq_anf$36$$35$$35$d1GF () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1904 () Int)
(declare-fun GHC.Prim.$62$$35$$35$$35$9m () Int)
(declare-fun lq_tmp$36$x$35$$35$2240 () Int)
(declare-fun VV$35$$35$2625 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Fp$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1849 () Int)
(declare-fun lq_tmp$36$x$35$$35$2789 () Int)
(declare-fun a1$35$$35$a1uN () Int)
(declare-fun xs$35$$35$a1tt () Int)
(declare-fun VV$35$$35$F$35$$35$335 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1962 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$4667 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1843 () Int)
(declare-fun GHC.Show.showList__$35$$35$rbU () Int)
(declare-fun VV$35$$35$4645 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1942 () Int)
(declare-fun x_Tuple62 () Int)
(declare-fun xcmp () Int)
(declare-fun VV$35$$35$2646 () Int)
(declare-fun VV$35$$35$5209 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1846 () Int)
(declare-fun VV$35$$35$4662 () Int)
(declare-fun VV$35$$35$4479 () Int)
(declare-fun VV$35$$35$F$35$$35$330 () Int)
(declare-fun VV$35$$35$F$35$$35$356 () Int)
(declare-fun a$35$$35$a1v9 () Int)
(declare-fun VV$35$$35$4640 () Int)
(declare-fun VV$35$$35$2747 () Int)
(declare-fun lq_tmp$36$x$35$$35$4225 () Int)
(declare-fun GHC.CString.unpackCString$35$$35$$35$0k () Int)
(declare-fun VV$35$$35$5029 () Int)
(declare-fun lq_anf$36$$35$$35$d1FJ () Int)
(declare-fun VV$35$$35$4543 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1461 () Int)
(declare-fun VV$35$$35$5128 () Int)
(declare-fun VV$35$$35$5012 () Int)
(declare-fun VV$35$$35$F$35$$35$282 () Int)
(declare-fun VV$35$$35$3050 () Int)
(declare-fun VV$35$$35$F$35$$35$257 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1922 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_tmp$36$x$35$$35$1514 () Int)
(declare-fun x$35$$35$a1tB () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1601 () Int)
(declare-fun fix$36$$36$dOrd_a1C3 () Int)
(declare-fun VV$35$$35$F$35$$35$275 () Int)
(declare-fun a$35$$35$a1uR () Int)
(declare-fun lq_anf$36$$35$$35$d1FZ () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_tmp$36$x$35$$35$1415 () Int)
(declare-fun VV$35$$35$2738 () Int)
(declare-fun VV$35$$35$4596 () Int)
(declare-fun lq_tmp$36$x$35$$35$2830 () Int)
(declare-fun ds_d1Ef () Int)
(declare-fun VV$35$$35$F$35$$35$329 () Int)
(declare-fun VV$35$$35$3894 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gs () Int)
(declare-fun lq_tmp$36$x$35$$35$3255 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$5175 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$2851 () Int)
(declare-fun VV$35$$35$4974 () Int)
(declare-fun VV$35$$35$2792 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$2590 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fj () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$5083 () Int)
(declare-fun b2$35$$35$a1vh () Int)
(declare-fun GHC.Classes.$61$$61$$35$$35$02H () Int)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$2579 () Int)
(declare-fun VV$35$$35$4763 () Int)
(declare-fun b2$35$$35$a1v8 () Int)
(declare-fun VV$35$$35$4497 () Int)
(declare-fun lq_tmp$36$x$35$$35$1770 () Int)
(declare-fun a2$35$$35$a1vc () Int)
(declare-fun lq_anf$36$$35$$35$d1G3 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1919 () Int)
(declare-fun VV$35$$35$4741 () Int)
(declare-fun VV$35$$35$1997 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fz () Int)
(declare-fun VV$35$$35$4604 () Int)
(declare-fun VV$35$$35$4561 () Int)
(declare-fun a_a1zZ () Int)
(declare-fun VV$35$$35$1906 () Int)
(declare-fun lq_tmp$36$x$35$$35$2795 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_tmp$36$x$35$$35$2139 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$2848 () Int)
(declare-fun ys$35$$35$a1tH () Int)
(declare-fun lq_karg$36$$36$dNum_a1A0$35$$35$k_$35$$35$1846 () Int)
(declare-fun VV$35$$35$4507 () Int)
(declare-fun lq_anf$36$$35$$35$d1GS () Int)
(declare-fun fix$36$$36$dOrd_a1Bz () Int)
(declare-fun VV$35$$35$4930 () Int)
(declare-fun VV$35$$35$4525 () Int)
(declare-fun lq_tmp$36$x$35$$35$2694 () Int)
(declare-fun lq_tmp$36$x$35$$35$2496 () Int)
(declare-fun VV$35$$35$4813 () Int)
(declare-fun papp7 () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tJ$35$$35$k_$35$$35$1843 () Int)
(declare-fun b1$35$$35$a1uP () Int)
(declare-fun VV$35$$35$4956 () Int)
(declare-fun lq_anf$36$$35$$35$d1H4 () Int)
(declare-fun lq_anf$36$$35$$35$d1GC () Int)
(declare-fun lq_tmp$36$x$35$$35$991 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$41$$35$$35$78 () Int)
(declare-fun VV$35$$35$F$35$$35$312 () Int)
(declare-fun VV$35$$35$4882 () Int)
(declare-fun VV$35$$35$4659 () Int)
(declare-fun VV$35$$35$4926 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fu () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$1426 () Int)
(declare-fun VV$35$$35$4940 () Int)
(declare-fun VV$35$$35$5059 () Int)
(declare-fun ds_d1EI () Int)
(declare-fun VV$35$$35$4827 () Int)
(declare-fun lq_karg$36$$36$dNum_a1A0$35$$35$k_$35$$35$1849 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$4962 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1601 () Int)
(declare-fun lit$36$Cannot$32$call$32$foldr1$32$with$32$empty$32$list () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1774 () Int)
(declare-fun VV$35$$35$5095 () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tk$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4863 () Int)
(declare-fun VV$35$$35$4148 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_tmp$36$x$35$$35$2963 () Int)
(declare-fun x_Tuple53 () Int)
(declare-fun lq_tmp$36$x$35$$35$2859 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_anf$36$$35$$35$d1GL () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$2649 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$4630 () Int)
(declare-fun VV$35$$35$5004 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$4577 () Int)
(declare-fun lit$36$concat () Int)
(declare-fun VV$35$$35$F$35$$35$294 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1922 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4612 () Int)
(declare-fun VV$35$$35$4511 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_anf$36$$35$$35$d1FE () Int)
(declare-fun VV$35$$35$4533 () Int)
(declare-fun a2$35$$35$a1uG () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_tmp$36$x$35$$35$2729 () Int)
(declare-fun a1$35$$35$a1uT () Int)
(declare-fun VV$35$$35$F$35$$35$258 () Int)
(declare-fun lq_tmp$36$x$35$$35$2271 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1777 () Int)
(declare-fun VV$35$$35$2030 () Int)
(declare-fun VV$35$$35$2993 () Int)
(declare-fun VV$35$$35$5194 () Int)
(declare-fun VV$35$$35$4580 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_tmp$36$x$35$$35$2628 () Int)
(declare-fun VV$35$$35$4072 () Int)
(declare-fun VV$35$$35$4599 () Int)
(declare-fun VV$35$$35$F$35$$35$304 () Int)
(declare-fun VV$35$$35$1899 () Int)
(declare-fun lq_anf$36$$35$$35$d1FU () Int)
(declare-fun lq_tmp$36$x$35$$35$2941 () Int)
(declare-fun VV$35$$35$4674 () Int)
(declare-fun VV$35$$35$F$35$$35$326 () Int)
(declare-fun x_Tuple71 () Int)
(declare-fun b1$35$$35$a1vd () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_anf$36$$35$$35$d1F5 () Int)
(declare-fun VV$35$$35$4481 () Int)
(declare-fun VV$35$$35$1981 () Int)
(declare-fun VV$35$$35$4731 () Int)
(declare-fun lq_tmp$36$x$35$$35$2657 () Int)
(declare-fun VV$35$$35$4858 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fe () Int)
(declare-fun VV$35$$35$F$35$$35$263 () Int)
(declare-fun lq_tmp$36$x$35$$35$2235 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1942 () Int)
(declare-fun VV$35$$35$2074 () Int)
(declare-fun VV$35$$35$1000 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1962 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$5089 () Int)
(declare-fun VV$35$$35$2071 () Int)
(declare-fun lq_tmp$36$x$35$$35$2768 () Int)
(declare-fun VV$35$$35$F$35$$35$266 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1846 () Int)
(declare-fun b2$35$$35$a1v2 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1598 () Int)
(declare-fun List.empty$35$$35$rXw () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FQ$35$$35$k_$35$$35$1962 () Int)
(declare-fun lq_anf$36$$35$$35$d1G9 () Int)
(declare-fun VV$35$$35$3025 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$5067 () Int)
(declare-fun GHC.Show.$36$dmshow$35$$35$r11G () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1922 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fp () Int)
(declare-fun VV$35$$35$4787 () Int)
(declare-fun VV$35$$35$4154 () Int)
(declare-fun b$35$$35$a1uK () Int)
(declare-fun VV$35$$35$4822 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$5119 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$1522 () Int)
(declare-fun lq_anf$36$$35$$35$d1GY () Int)
(declare-fun VV$35$$35$2116 () Int)
(declare-fun x$35$$35$a1th () Int)
(declare-fun VV$35$$35$2824 () Int)
(declare-fun b1$35$$35$a1v1 () Int)
(declare-fun GHC.Prim.$45$$35$$35$$35$99 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1919 () Int)
(declare-fun VV$35$$35$2806 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1604 () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tJ$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$4770 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Fo$35$$35$k_$35$$35$1461 () Int)
(declare-fun VV$35$$35$2583 () Int)
(declare-fun VV$35$$35$3744 () Int)
(declare-fun VV$35$$35$4866 () Int)
(declare-fun lq_anf$36$$35$$35$d1GI () Int)
(declare-fun VV$35$$35$F$35$$35$318 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1774 () Int)
(declare-fun VV$35$$35$2677 () Int)
(declare-fun VV$35$$35$4451 () Int)
(declare-fun lq_karg$36$xss$35$$35$a1tL$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$2709 () Int)
(declare-fun VV$35$$35$5221 () Int)
(declare-fun VV$35$$35$4888 () Int)
(declare-fun VV$35$$35$4653 () Int)
(declare-fun VV$35$$35$4635 () Int)
(declare-fun VV$35$$35$4473 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1982 () Int)
(declare-fun VV$35$$35$4572 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1846 () Int)
(declare-fun VV$35$$35$5203 () Int)
(declare-fun VV$35$$35$4617 () Int)
(declare-fun VV$35$$35$4415 () Int)
(declare-fun lq_tmp$36$x$35$$35$2331 () Int)
(declare-fun lq_tmp$36$x$35$$35$2890 () Int)
(declare-fun a$35$$35$a1v3 () Int)
(declare-fun VV$35$$35$4448 () Int)
(declare-fun VV$35$$35$5023 () Int)
(declare-fun VV$35$$35$4437 () Int)
(declare-fun VV$35$$35$5045 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$4549 () Int)
(declare-fun VV$35$$35$4275 () Int)
(declare-fun VV$35$$35$F$35$$35$288 () Int)
(declare-fun VV$35$$35$1603 () Int)
(declare-fun xs$35$$35$a1tk () Int)
(declare-fun lq_tmp$36$x$35$$35$3246 () Int)
(declare-fun VV$35$$35$4585 () Int)
(declare-fun VV$35$$35$2996 () Int)
(declare-fun VV$35$$35$2068 () Int)
(declare-fun lq_tmp$36$x$35$$35$2823 () Int)
(declare-fun lq_tmp$36$x$35$$35$2900 () Int)
(declare-fun GHC.Show.D$58$Show$35$$35$r11L () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1922 () Int)
(declare-fun a$35$$35$a1uX () Int)
(declare-fun VV$35$$35$2611 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FQ$35$$35$k_$35$$35$1959 () Int)
(declare-fun b2$35$$35$a1uI () Int)
(declare-fun VV$35$$35$2475 () Int)
(declare-fun VV$35$$35$F$35$$35$301 () Int)
(declare-fun lq_anf$36$$35$$35$d1FP () Int)
(declare-fun VV$35$$35$2608 () Int)
(declare-fun fix$36$$36$dShow_a1CC () Int)
(declare-fun VV$35$$35$F$35$$35$323 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gy () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1919 () Int)
(declare-fun x_Tuple74 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1523 () Int)
(declare-fun lq_anf$36$$35$$35$d1F0 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_tmp$36$x$35$$35$2652 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1715 () Int)
(declare-fun lq_tmp$36$x$35$$35$2753 () Int)
(declare-fun VV$35$$35$4990 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$4759 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1461 () Int)
(declare-fun b$35$$35$a1ty () Int)
(declare-fun lq_tmp$36$x$35$$35$2758 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$2836 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fk () Int)
(declare-fun lq_anf$36$$35$$35$d1Gb () Int)
(declare-fun ds_d1Ew () Int)
(declare-fun VV$35$$35$4874 () Int)
(declare-fun lq_karg$36$VV$35$$35$1600$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1962 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_anf$36$$35$$35$d1G2 () Int)
(declare-fun VV$35$$35$4694 () Int)
(declare-fun lq_tmp$36$x$35$$35$2741 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4928 () Int)
(declare-fun VV$35$$35$5031 () Int)
(declare-fun VV$35$$35$5112 () Int)
(declare-fun VV$35$$35$4913 () Int)
(declare-fun VV$35$$35$5057 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$44$$44$$41$$35$$35$7e () Int)
(declare-fun VV$35$$35$3271 () Int)
(declare-fun lq_anf$36$$35$$35$d1GR () Int)
(declare-fun VV$35$$35$4829 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4425 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$2094 () Int)
(declare-fun VV$35$$35$4795 () Int)
(declare-fun VV$35$$35$5130 () Int)
(declare-fun VV$35$$35$5075 () Int)
(declare-fun GHC.Num.$45$$35$$35$02B () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$1283 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1942 () Int)
(declare-fun VV$35$$35$2126 () Int)
(declare-fun lq_tmp$36$x$35$$35$1485 () Int)
(declare-fun VV$35$$35$5156 () Int)
(declare-fun len () Int)
(declare-fun lq_karg$36$x$35$$35$a1tl$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_anf$36$$35$$35$d1H5 () Int)
(declare-fun lit$36$$40$$58$$43$$58$$41$$32$ () Int)
(declare-fun ds_d1EW () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1494 () Int)
(declare-fun lq_tmp$36$x$35$$35$2046 () Int)
(declare-fun lq_anf$36$$35$$35$d1GB () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun VV$35$$35$1978 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Fs$35$$35$k_$35$$35$1523 () Int)
(declare-fun VV$35$$35$F$35$$35$331 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1982 () Int)
(declare-fun Data.Foldable.length$35$$35$r1s () Int)
(declare-fun VV$35$$35$4443 () Int)
(declare-fun lq_tmp$36$x$35$$35$4224 () Int)
(declare-fun x_Tuple66 () Int)
(declare-fun x_Tuple44 () Int)
(declare-fun VV$35$$35$4461 () Int)
(declare-fun GHC.Prim.$61$$61$$35$$35$$35$9o () Int)
(declare-fun VV$35$$35$4627 () Int)
(declare-fun VV$35$$35$1961 () Int)
(declare-fun lq_tmp$36$x$35$$35$2640 () Int)
(declare-fun VV$35$$35$4726 () Int)
(declare-fun xListSelector () Int)
(declare-fun VV$35$$35$4982 () Int)
(declare-fun a1$35$$35$a1uZ () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$F$35$$35$274 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$4704 () Int)
(declare-fun VV$35$$35$5183 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1494 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1494 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$3015 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1939 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1922 () Int)
(declare-fun lq_tmp$36$x$35$$35$3254 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gr () Int)
(declare-fun VV$35$$35$4431 () Int)
(declare-fun VV$35$$35$5043 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1598 () Int)
(declare-fun strLen () Int)
(declare-fun lq_anf$36$$35$$35$d1FF () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$4583 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_tmp$36$x$35$$35$2708 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_tmp$36$x$35$$35$2906 () Int)
(declare-fun GHC.Types.$91$$93$$35$$35$6m () Int)
(declare-fun VV$35$$35$4709 () Int)
(declare-fun VV$35$$35$F$35$$35$279 () Int)
(declare-fun lq_tmp$36$x$35$$35$2250 () Int)
(declare-fun lit$36$Bad$32$call$32$to$32$zipWith () Int)
(declare-fun VV$35$$35$F$35$$35$307 () Int)
(declare-fun lq_anf$36$$35$$35$d1FV () Int)
(declare-fun lq_tmp$36$x$35$$35$2924 () Int)
(declare-fun lq_tmp$36$x$35$$35$1419 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1942 () Int)
(declare-fun b1$35$$35$a1vg () Int)
(declare-fun x_Tuple72 () Int)
(declare-fun VV$35$$35$4677 () Int)
(declare-fun lq_tmp$36$x$35$$35$3259 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1939 () Int)
(declare-fun lq_anf$36$$35$$35$d1F6 () Int)
(declare-fun VV$35$$35$4680 () Int)
(declare-fun VV$35$$35$4754 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1907 () Int)
(declare-fun lq_tmp$36$x$35$$35$1396 () Int)
(declare-fun VV$35$$35$4978 () Int)
(declare-fun VV$35$$35$5179 () Int)
(declare-fun lq_karg$36$VV$35$$35$1941$35$$35$k_$35$$35$1939 () Int)
(declare-fun GHC.Num.$36$fNumInt$35$$35$rlQ () Int)
(declare-fun lq_anf$36$$35$$35$d1Ff () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1598 () Int)
(declare-fun VV$35$$35$4996 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$3980 () Int)
(declare-fun lq_anf$36$$35$$35$d1Go () Int)
(declare-fun GHC.Tuple.$40$$44$$41$$35$$35$74 () Int)
(declare-fun VV$35$$35$F$35$$35$260 () Int)
(declare-fun lq_tmp$36$x$35$$35$2236 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1715 () Int)
(declare-fun List.l3$35$$35$rXs () Int)
(declare-fun VV$35$$35$1003 () Int)
(declare-fun VV$35$$35$4699 () Int)
(declare-fun isJust () Int)
(declare-fun VV$35$$35$4806 () Int)
(declare-fun b$35$$35$a1uM () Int)
(declare-fun VV$35$$35$5061 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fv () Int)
(declare-fun VV$35$$35$2945 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$5160 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1942 () Int)
(declare-fun VV$35$$35$2844 () Int)
(declare-fun lq_tmp$36$x$35$$35$2087 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1777 () Int)
(declare-fun VV$35$$35$4529 () Int)
(declare-fun b1$35$$35$a1v7 () Int)
(declare-fun x$35$$35$a1tn () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$4798 () Int)
(declare-fun VV$35$$35$4776 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1777 () Int)
(declare-fun lit$36$singleton () Int)
(declare-fun VV$35$$35$4457 () Int)
(declare-fun lq_tmp$36$x$35$$35$1837 () Int)
(declare-fun VV$35$$35$4655 () Int)
(declare-fun VV$35$$35$4556 () Int)
(declare-fun lq_anf$36$$35$$35$d1GO () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4475 () Int)
(declare-fun VV$35$$35$5205 () Int)
(declare-fun VV$35$$35$F$35$$35$297 () Int)
(declare-fun VV$35$$35$4633 () Int)
(declare-fun VV$35$$35$4413 () Int)
(declare-fun VV$35$$35$5025 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$5106 () Int)
(declare-fun VV$35$$35$5000 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1494 () Int)
(declare-fun b$35$$35$a1va () Int)
(declare-fun VV$35$$35$4515 () Int)
(declare-fun VV$35$$35$5101 () Int)
(declare-fun VV$35$$35$2681 () Int)
(declare-fun VV$35$$35$F$35$$35$289 () Int)
(declare-fun lq_anf$36$$35$$35$d1FA () Int)
(declare-fun VV$35$$35$4537 () Int)
(declare-fun fix$36$$36$dEq_a1Aw () Int)
(declare-fun VV$35$$35$4900 () Int)
(declare-fun VV$35$$35$5019 () Int)
(declare-fun VV$35$$35$5123 () Int)
(declare-fun lq_tmp$36$x$35$$35$3247 () Int)
(declare-fun lq_tmp$36$x$35$$35$2275 () Int)
(declare-fun VV$35$$35$5190 () Int)
(declare-fun Assert.lAssert$35$$35$rlA () Int)
(declare-fun VV$35$$35$3006 () Int)
(declare-fun VV$35$$35$1884 () Int)
(declare-fun VV$35$$35$4988 () Int)
(declare-fun Prop () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1715 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1715 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_anf$36$$35$$35$d1FQ () Int)
(declare-fun VV$35$$35$F$35$$35$300 () Int)
(declare-fun lq_tmp$36$x$35$$35$2077 () Int)
(declare-fun VV$35$$35$4890 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gx () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$4670 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$44$$44$$44$$41$$35$$35$7c () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1939 () Int)
(declare-fun x_Tuple75 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$4687 () Int)
(declare-fun lq_anf$36$$35$$35$d1F1 () Int)
(declare-fun VV$35$$35$4485 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fa () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$2799 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1922 () Int)
(declare-fun GHC.Classes.$38$$38$$35$$35$r1B () Int)
(declare-fun Assert.fixme$35$$35$rlx () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$x$35$$35$a1tn$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$4717 () Int)
(declare-fun List.replicate$35$$35$rXz () Int)
(declare-fun VV$35$$35$4768 () Int)
(declare-fun lq_tmp$36$x$35$$35$2734 () Int)
(declare-fun VV$35$$35$F$35$$35$267 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1774 () Int)
(declare-fun GHC.Classes.D$58$Eq$35$$35$rsR () Int)
(declare-fun fix$36$$36$dEq_a1AG () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1601 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fq () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$4801 () Int)
(declare-fun VV$35$$35$5145 () Int)
(declare-fun VV$35$$35$4919 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$5167 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FR$35$$35$k_$35$$35$1979 () Int)
(declare-fun ds_d1EM () Int)
(declare-fun VV$35$$35$3622 () Int)
(declare-fun VV$35$$35$4944 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1904 () Int)
(declare-fun fix$36$$36$dShow_a1Cb () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$2698 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$4966 () Int)
(declare-fun xs$35$$35$a1tJ () Int)
(declare-fun VV$35$$35$4845 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1849 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$5091 () Int)
(declare-fun VV$35$$35$4551 () Int)
(declare-fun GHC.Prim.$60$$35$$35$$35$9q () Int)
(declare-fun VV$35$$35$F$35$$35$319 () Int)
(declare-fun VV$35$$35$1589 () Int)
(declare-fun lq_anf$36$$35$$35$d1GH () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$4950 () Int)
(declare-fun VV$35$$35$4815 () Int)
(declare-fun VV$35$$35$5151 () Int)
(declare-fun papp1 () Int)
(declare-fun b1$35$$35$a1uV () Int)
(declare-fun lq_anf$36$$35$$35$d1H2 () Int)
(declare-fun VV$35$$35$2705 () Int)
(declare-fun VV$35$$35$1133 () Int)
(declare-fun lq_anf$36$$35$$35$d1GE () Int)
(declare-fun VV$35$$35$F$35$$35$314 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1907 () Int)
(declare-fun xs$35$$35$a1tw () Int)
(declare-fun lq_tmp$36$x$35$$35$2063 () Int)
(declare-fun ds_d1DY () Int)
(declare-fun VV$35$$35$4419 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1846 () Int)
(declare-fun x_Tuple61 () Int)
(declare-fun lq_anf$36$$35$$35$d1FL () Int)
(declare-fun VV$35$$35$4620 () Int)
(declare-fun VV$35$$35$4545 () Int)
(declare-fun VV$35$$35$5014 () Int)
(declare-fun VV$35$$35$5216 () Int)
(declare-fun x_Tuple43 () Int)
(declare-fun VV$35$$35$5049 () Int)
(declare-fun VV$35$$35$F$35$$35$284 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1998 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1849 () Int)
(declare-fun VV$35$$35$2064 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1598 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1849 () Int)
(declare-fun lq_tmp$36$x$35$$35$2702 () Int)
(declare-fun List.singleton$35$$35$rXy () Int)
(declare-fun lq_tmp$36$x$35$$35$2621 () Int)
(declare-fun lq_tmp$36$x$35$$35$1170 () Int)
(declare-fun VV$35$$35$F$35$$35$273 () Int)
(declare-fun VV$35$$35$3012 () Int)
(declare-fun GHC.Classes.$36$fOrdInt$35$$35$rmS () Int)
(declare-fun lq_tmp$36$x$35$$35$3253 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FO$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_tmp$36$x$35$$35$1237 () Int)
(declare-fun VV$35$$35$2604 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gu () Int)
(declare-fun GHC.Show.showsPrec$35$$35$r9 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Ft$35$$35$k_$35$$35$1523 () Int)
(declare-fun xss$35$$35$a1tL () Int)
(declare-fun lq_tmp$36$x$35$$35$2948 () Int)
(declare-fun GHC.Types.EQ$35$$35$6U () Int)
(declare-fun VV$35$$35$4837 () Int)
(declare-fun VV$35$$35$5173 () Int)
(declare-fun VV$35$$35$4972 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fl () Int)
(declare-fun VV$35$$35$5085 () Int)
(declare-fun VV$35$$35$2813 () Int)
(declare-fun VV$35$$35$4491 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$1009 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1523 () Int)
(declare-fun lq_tmp$36$x$35$$35$2746 () Int)
(declare-fun fix$36$$36$dOrd_a1Bl () Int)
(declare-fun lq_anf$36$$35$$35$d1G5 () Int)
(declare-fun lq_tmp$36$x$35$$35$1169 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1Fq$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4567 () Int)
(declare-fun lq_tmp$36$x$35$$35$2885 () Int)
(declare-fun VV$35$$35$4501 () Int)
(declare-fun VV$35$$35$2974 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_anf$36$$35$$35$d1GU () Int)
(declare-fun VV$35$$35$2695 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1494 () Int)
(declare-fun VV$35$$35$4848 () Int)
(declare-fun VV$35$$35$4523 () Int)
(declare-fun VV$35$$35$4936 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$F$35$$35$261 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gn () Int)
(declare-fun VV$35$$35$3044 () Int)
(declare-fun fix$36$$36$dOrd_a1B7 () Int)
(declare-fun VV$35$$35$4711 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1942 () Int)
(declare-fun lq_tmp$36$x$35$$35$2237 () Int)
(declare-fun b2$35$$35$a1ve () Int)
(declare-fun lq_tmp$36$x$35$$35$2633 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1461 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1843 () Int)
(declare-fun lq_tmp$36$x$35$$35$2215 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1777 () Int)
(declare-fun VV$35$$35$5143 () Int)
(declare-fun VV$35$$35$4609 () Int)
(declare-fun VV$35$$35$4780 () Int)
(declare-fun VV$35$$35$2133 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1715 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fw () Int)
(declare-fun VV$35$$35$4924 () Int)
(declare-fun lq_karg$36$xs$35$$35$a1tt$35$$35$k_$35$$35$1774 () Int)
(declare-fun VV$35$$35$4429 () Int)
(declare-fun VV$35$$35$4942 () Int)
(declare-fun lq_tmp$36$x$35$$35$2086 () Int)
(declare-fun lq_tmp$36$x$35$$35$2680 () Int)
(declare-fun VV$35$$35$4825 () Int)
(declare-fun lq_tmp$36$x$35$$35$2350 () Int)
(declare-fun VV$35$$35$2098 () Int)
(declare-fun VV$35$$35$1460 () Int)
(declare-fun VV$35$$35$4960 () Int)
(declare-fun VV$35$$35$5079 () Int)
(declare-fun VV$35$$35$4843 () Int)
(declare-fun VV$35$$35$4861 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1601 () Int)
(declare-fun lq_tmp$36$x$35$$35$2349 () Int)
(declare-fun VV$35$$35$5097 () Int)
(declare-fun lq_anf$36$$35$$35$d1GN () Int)
(declare-fun VV$35$$35$946 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1982 () Int)
(declare-fun x_Tuple51 () Int)
(declare-fun GHC.Classes.not$35$$35$r1A () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1849 () Int)
(declare-fun a1$35$$35$a1uF () Int)
(declare-fun VV$35$$35$F$35$$35$296 () Int)
(declare-fun GHC.Prim.$43$$35$$35$$35$98 () Int)
(declare-fun GHC.Base.Nothing$35$$35$r1d () Int)
(declare-fun VV$35$$35$4575 () Int)
(declare-fun VV$35$$35$5006 () Int)
(declare-fun lq_tmp$36$x$35$$35$2781 () Int)
(declare-fun VV$35$$35$F$35$$35$360 () Int)
(declare-fun VV$35$$35$4513 () Int)
(declare-fun lq_tmp$36$x$35$$35$2336 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_karg$36$ds_d1E5$35$$35$k_$35$$35$1604 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$5125 () Int)
(declare-fun VV$35$$35$4531 () Int)
(declare-fun lq_anf$36$$35$$35$d1FG () Int)
(declare-fun VV$35$$35$2081 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$2357 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$5196 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_tmp$36$x$35$$35$2431 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1907 () Int)
(declare-fun GHC.Classes.$62$$35$$35$r3 () Int)
(declare-fun lq_tmp$36$x$35$$35$2053 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$2735 () Int)
(declare-fun GHC.Prim.$60$$61$$35$$35$$35$9r () Int)
(declare-fun lq_tmp$36$x$35$$35$2842 () Int)
(declare-fun a2$35$$35$a1uU () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1904 () Int)
(declare-fun VV$35$$35$F$35$$35$306 () Int)
(declare-fun VV$35$$35$2634 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FG$35$$35$k_$35$$35$1774 () Int)
(declare-fun List.prop_map$35$$35$rXC () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$2009 () Int)
(declare-fun lq_tmp$36$x$35$$35$3258 () Int)
(declare-fun x_Tuple73 () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1962 () Int)
(declare-fun ds_d1Ek () Int)
(declare-fun VV$35$$35$3594 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$4483 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1939 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_tmp$36$x$35$$35$1397 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1774 () Int)
(declare-fun lq_anf$36$$35$$35$d1F7 () Int)
(declare-fun GHC.Classes.compare$35$$35$r2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FP$35$$35$k_$35$$35$1939 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fg () Int)
(declare-fun VV$35$$35$4733 () Int)
(declare-fun List.prop_size$35$$35$rXr () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1962 () Int)
(declare-fun a$35$$35$a1uJ () Int)
(declare-fun lq_anf$36$$35$$35$d1F2 () Int)
(declare-fun b$35$$35$a1uY () Int)
(declare-fun VV$35$$35$4736 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fb () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1715 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$4992 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$4714 () Int)
(declare-fun VV$35$$35$F$35$$35$264 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1846 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fr () Int)
(declare-fun VV$35$$35$4921 () Int)
(declare-fun VV$35$$35$5065 () Int)
(declare-fun VV$35$$35$4569 () Int)
(declare-fun VV$35$$35$4785 () Int)
(declare-fun lq_karg$36$List.l0$35$$35$rXv$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$4820 () Int)
(declare-fun List.l1$35$$35$rXu () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1979 () Int)
(declare-fun VV$35$$35$2958 () Int)
(declare-fun x$35$$35$a1tj () Int)
(declare-fun VV$35$$35$4938 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1604 () Int)
(declare-fun VV$35$$35$4772 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1939 () Int)
(declare-fun x_Tuple54 () Int)
(declare-fun lq_tmp$36$x$35$$35$2964 () Int)
(declare-fun lq_anf$36$$35$$35$d1GK () Int)
(declare-fun VV$35$$35$4453 () Int)
(declare-fun lq_karg$36$List.l2$35$$35$rXt$35$$35$k_$35$$35$1907 () Int)
(declare-fun VV$35$$35$5223 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$4471 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1843 () Int)
(declare-fun VV$35$$35$5201 () Int)
(declare-fun lq_karg$36$VV$35$$35$1921$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_tmp$36$x$35$$35$2939 () Int)
(declare-fun lq_karg$36$VV$35$$35$1961$35$$35$k_$35$$35$1959 () Int)
(declare-fun VV$35$$35$4233 () Int)
(declare-fun VV$35$$35$F$35$$35$338 () Int)
(declare-fun VV$35$$35$5021 () Int)
(declare-fun lq_karg$36$List.prop_size$35$$35$rXr$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$4615 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1942 () Int)
(declare-fun VV$35$$35$4648 () Int)
(declare-fun VV$35$$35$4417 () Int)
(declare-fun b1$35$$35$a1uH () Int)
(declare-fun VV$35$$35$5047 () Int)
(declare-fun VV$35$$35$4130 () Int)
(declare-fun lq_anf$36$$35$$35$d1FB () Int)
(declare-fun VV$35$$35$4435 () Int)
(declare-fun VV$35$$35$4903 () Int)
(declare-fun VV$35$$35$1689 () Int)
(declare-fun xs$35$$35$a1ti () Int)
(declare-fun lq_tmp$36$x$35$$35$2803 () Int)
(declare-fun x2s$35$$35$a1tK () Int)
(declare-fun VV$35$$35$2712 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun cmp () Int)
(declare-fun VV$35$$35$4893 () Int)
(declare-fun VV$35$$35$2576 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FQ$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_tmp$36$x$35$$35$2847 () Int)
(declare-fun lq_anf$36$$35$$35$d1FR () Int)
(declare-fun x_Tuple76 () Int)
(declare-fun fix$36$$36$dShow_a1CA () Int)
(declare-fun VV$35$$35$3354 () Int)
(declare-fun VV$35$$35$5185 () Int)
(declare-fun lq_karg$36$GHC.Types.GT$35$$35$6W$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$4591 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1979 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1959 () Int)
(declare-fun lq_anf$36$$35$$35$d1Gt () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FR$35$$35$k_$35$$35$1982 () Int)
(declare-fun lq_tmp$36$x$35$$35$3252 () Int)
(declare-fun VV$35$$35$4489 () Int)
(declare-fun lq_tmp$36$x$35$$35$978 () Int)
(declare-fun VV$35$$35$2597 () Int)
(declare-fun lq_karg$36$GHC.Num.$36$fNumInt$35$$35$rlQ$35$$35$k_$35$$35$1601 () Int)
(declare-fun VV$35$$35$4739 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1939 () Int)
(declare-fun VV$35$$35$4850 () Int)
(declare-fun lq_anf$36$$35$$35$d1Fm () Int)
(declare-fun wcmp () Int)
(declare-fun VV$35$$35$4872 () Int)
(declare-fun List.Emp$35$$35$rXo () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1922 () Int)
(declare-fun VV$35$$35$3772 () Int)
(declare-fun VV$35$$35$4692 () Int)
(declare-fun VV$35$$35$4746 () Int)
(declare-fun lq_karg$36$GHC.Types.EQ$35$$35$6U$35$$35$k_$35$$35$1849 () Int)
(declare-fun GHC.Classes.$36$fEqInt$35$$35$roe () Int)
(declare-fun lq_anf$36$$35$$35$d1G4 () Int)
(declare-fun VV$35$$35$5037 () Int)
(declare-fun VV$35$$35$5149 () Int)
(declare-fun VV$35$$35$1668 () Int)
(declare-fun lq_tmp$36$x$35$$35$2105 () Int)
(declare-fun VV$35$$35$2928 () Int)
(declare-fun VV$35$$35$5051 () Int)
(declare-fun ds_d1EA () Int)
(declare-fun lq_anf$36$$35$$35$d1GT () Int)
(declare-fun VV$35$$35$4423 () Int)
(declare-fun VV$35$$35$5114 () Int)
(declare-fun VV$35$$35$1800 () Int)
(declare-fun lq_karg$36$List.l1$35$$35$rXu$35$$35$k_$35$$35$1715 () Int)
(declare-fun VV$35$$35$4948 () Int)
(declare-fun xs$35$$35$a1tF () Int)
(declare-fun VV$35$$35$1549 () Int)
(declare-fun VV$35$$35$4793 () Int)
(declare-fun VV$35$$35$5073 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$d1FQ$35$$35$k_$35$$35$1998 () Int)
(declare-fun VV$35$$35$5136 () Int)
(declare-fun lq_karg$36$GHC.Types.False$35$$35$68$35$$35$k_$35$$35$1919 () Int)
(declare-fun lq_karg$36$GHC.Types.LT$35$$35$6S$35$$35$k_$35$$35$1601 () Int)
(declare-fun GHC.Real.D$58$Fractional$35$$35$rFB () Int)
(declare-fun lq_karg$36$GHC.Types.True$35$$35$6u$35$$35$k_$35$$35$1601 () Int)
(declare-fun lq_tmp$36$x$35$$35$1373 () Int)
(declare-fun VV$35$$35$2120 () Int)
(declare-fun lq_anf$36$$35$$35$d1H3 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1777 () Int)
(declare-fun lq_tmp$36$x$35$$35$996 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1904 () Int)
(declare-fun lq_anf$36$$35$$35$d1GD () Int)
(declare-fun VV$35$$35$F$35$$35$315 () Int)
(declare-fun ds_d1EQ () Int)
(declare-fun VV$35$$35$4885 () Int)
(declare-fun VV$35$$35$4665 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1843 () Int)
(declare-fun fst () Int)
(declare-fun VV$35$$35$2726 () Int)
(declare-fun snd () Int)
(declare-fun VV$35$$35$4638 () Int)
(declare-fun ds_d1DX () Int)
(declare-fun VV$35$$35$4445 () Int)
(declare-fun lq_karg$36$List.l3$35$$35$rXs$35$$35$k_$35$$35$1942 () Int)
(declare-fun VV$35$$35$1918 () Int)
(declare-fun VV$35$$35$4519 () Int)
(declare-fun lq_anf$36$$35$$35$d1FM () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fOrdInt$35$$35$rmS$35$$35$k_$35$$35$1962 () Int)
(declare-fun VV$35$$35$F$35$$35$285 () Int)
(declare-fun List.prop_concat$35$$35$rXI () Int)
(declare-fun x_Tuple42 () Int)
(declare-fun a2$35$$35$a1uO () Int)
(declare-fun VV$35$$35$4467 () Int)
(declare-fun x$35$$35$a1tE () Int)
(declare-fun VV$35$$35$4588 () Int)
(declare-fun VV$35$$35$4984 () Int)
(declare-fun lq_karg$36$GHC.Prim.void$35$$35$$35$0l$35$$35$k_$35$$35$1523 () Int)
(declare-fun lq_karg$36$GHC.Classes.$36$fEqInt$35$$35$roe$35$$35$k_$35$$35$1523 () Int)
(declare-fun List.zipWith$35$$35$rXF () Int)
(declare-fun VV$35$$35$4702 () Int)
(declare-fun VV$35$$35$3031 () Int)
(declare-fun GHC.Prim.void$35$$35$$35$0l () Int)
(declare-fun VV$35$$35$F$35$$35$272 () Int)
(assert (distinct List.prop_size$35$$35$rXr GHC.Types.True$35$$35$6u GHC.Types.False$35$$35$68))
(assert (distinct GHC.Types.EQ$35$$35$6U GHC.Types.GT$35$$35$6W GHC.Types.LT$35$$35$6S))
(assert (distinct GHC.Classes.$36$fOrdInt$35$$35$rmS))
(assert (distinct lit$36$singleton lit$36$Bad$32$call$32$to$32$zipWith lit$36$$40$$58$$43$$58$$41$$32$ lit$36$concat lit$36$Cannot$32$call$32$foldr1$32$with$32$empty$32$list lit$36$empty lit$36$Emp lit$36$replicate lit$36$add))
(assert (distinct GHC.Classes.$36$fEqInt$35$$35$roe))
(assert (distinct List.l1$35$$35$rXu List.l3$35$$35$rXs List.l0$35$$35$rXv List.l2$35$$35$rXt))
(assert (distinct GHC.Num.$36$fNumInt$35$$35$rlQ))
(assert (distinct GHC.Prim.void$35$$35$$35$0l))
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= VV$35$$35$5041 List.l3$35$$35$rXs) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$5041))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= VV$35$$35$F$35$$35$312 List.l3$35$$35$rXs) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$312))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$312) 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$312) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (>= n$35$$35$a1tm 0) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= VV$35$$35$F$35$$35$307 x$35$$35$a1tn) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$307 x$35$$35$a1tn)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$307 x$35$$35$a1tn)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$307 x$35$$35$a1tn)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$307 x$35$$35$a1tn)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$307 x$35$$35$a1tn)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$307 x$35$$35$a1tn))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tJ)) (and (= VV$35$$35$5000 xs$35$$35$a1tJ) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$5000))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$286 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$286 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$286 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$286 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$286 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$286 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (and (= VV$35$$35$4998 xs$35$$35$a1tJ) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4998))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tJ)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$285 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$285 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$285 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$285 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$285 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$285 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= VV$35$$35$F$35$$35$287 (+ lq_tmp$36$x$35$$35$1837 lq_tmp$36$x$35$$35$1838)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tJ)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$287 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$287 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$287 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$287 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$287 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$287 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (and (= VV$35$$35$4952 List.l0$35$$35$rXv) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4952))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$262 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$262 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$262 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$262 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$262 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$262 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$262 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) 3)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$261) 2)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$261 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= VV$35$$35$4962 List.l1$35$$35$rXu) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4962))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$266 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$266 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$266 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$266 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$266 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$266 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$266 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) 1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) 3)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$265) 2)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$265 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= VV$35$$35$4972 List.l2$35$$35$rXt) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4972)))))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$270 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$270 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$270 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$270 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$270 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$270 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$270 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) 3)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$269) 2)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$269 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= VV$35$$35$4982 List.l3$35$$35$rXs) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4982))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$274 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$274 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$274 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$274 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$274 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$274 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$274 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l3$35$$35$rXs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) 3)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$273) 2)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$273 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$271 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$271 List.l3$35$$35$rXs)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$271) 3)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$271) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$271) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (and (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267)) (and (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) 3) (<= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (<= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (>= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (>= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs) (not (= VV$35$$35$F$35$$35$267 List.l1$35$$35$rXu)) (not (= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)) (not (= VV$35$$35$F$35$$35$267 List.l0$35$$35$rXv)) (not (= VV$35$$35$F$35$$35$267 List.l1$35$$35$rXu)) (not (= VV$35$$35$F$35$$35$267 List.l0$35$$35$rXv)) (not (= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (and (= VV$35$$35$4966 lq_anf$36$$35$$35$d1FP) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4966))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$267 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$267 List.l2$35$$35$rXt)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) 2)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$267) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (and (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$263)) (and (not (= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)) (not (= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)) (not (= VV$35$$35$F$35$$35$263 List.l0$35$$35$rXv)) (not (= VV$35$$35$F$35$$35$263 List.l0$35$$35$rXv)))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= VV$35$$35$4956 lq_anf$36$$35$$35$d1FQ) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4956))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$263 List.l0$35$$35$rXv))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$263 List.l1$35$$35$rXu)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$263) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$263) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$263) 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (and (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$259)) (and (not (= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)) (not (= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (and (= VV$35$$35$4946 lq_anf$36$$35$$35$d1FR) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4946))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l2$35$$35$rXt))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l3$35$$35$rXs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$259 List.l1$35$$35$rXu))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$259 List.l0$35$$35$rXv)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$259) 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4942)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 size xss$35$$35$a1tL) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (<= 0 (int_apply_$35$$35$1 size xss$35$$35$a1tL))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= VV$35$$35$4940 xss$35$$35$a1tL) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$4940)))))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$258 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$258 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$258 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$258 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$258 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$258 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$258 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (<= 0 (int_apply_$35$$35$1 size ds_d1E5)) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (= VV$35$$35$F$35$$35$319 0) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) 0) (= lq_anf$36$$35$$35$d1Fx List.Emp$35$$35$rXo) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$319 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$319 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$319 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$319 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$319 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$319 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$319 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (= VV$35$$35$F$35$$35$315 (+ lq_anf$36$$35$$35$d1Fy lq_anf$36$$35$$35$d1Fz)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (<= 0 (int_apply_$35$$35$1 size ds_d1E5)) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1ti)) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1ti))) (= lq_anf$36$$35$$35$d1Fx (int_apply_$35$$35$2 List.$58$$43$$58$$35$$35$rXp x$35$$35$a1th xs$35$$35$a1ti)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1ti))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (= lq_anf$36$$35$$35$d1Fy 1) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (and (= lq_anf$36$$35$$35$d1Fz 0) (<= lq_anf$36$$35$$35$d1Fz 0) (>= lq_anf$36$$35$$35$d1Fz 0)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$315 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$315 0)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$315 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= VV$35$$35$5014 xs$35$$35$a1tt) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$5014))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tt)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (>= lq_anf$36$$35$$35$d1FG 0) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tt)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (>= lq_anf$36$$35$$35$d1FG 0) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= 0 1)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (= VV$35$$35$F$35$$35$315 (+ lq_anf$36$$35$$35$d1Fy lq_anf$36$$35$$35$d1Fz)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (<= 0 (int_apply_$35$$35$1 size ds_d1E5)) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1ti)) (and (= lq_anf$36$$35$$35$d1Fx ds_d1E5) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1ti))) (= lq_anf$36$$35$$35$d1Fx (int_apply_$35$$35$2 List.$58$$43$$58$$35$$35$rXp x$35$$35$a1th xs$35$$35$a1ti)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1ti))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fx))) (= lq_anf$36$$35$$35$d1Fy 1) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (>= lq_anf$36$$35$$35$d1Fz 0) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$315 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tt)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$288) (>= lq_anf$36$$35$$35$d1FG 0) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FH)) (>= lq_anf$36$$35$$35$d1FI 0) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FJ) (= lq_anf$36$$35$$35$d1FG lq_anf$36$$35$$35$d1FI)) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$288)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= lq_anf$36$$35$$35$d1Fw 3) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$320) (+ 1 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$320))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$320) 3)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tt)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (>= lq_anf$36$$35$$35$d1FG 0) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FH)) (>= lq_anf$36$$35$$35$d1FI 0) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FJ) (= lq_anf$36$$35$$35$d1FG lq_anf$36$$35$$35$d1FI)) (= VV$35$$35$F$35$$35$289 lq_anf$36$$35$$35$d1FJ) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$289)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1Fm lit$36$replicate) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fm) 9)) (and (= VV$35$$35$F$35$$35$338 lq_anf$36$$35$$35$d1Fn) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$338) 0)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (and (= lq_anf$36$$35$$35$d1Fn lq_anf$36$$35$$35$d1Fm) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fn) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fm)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fn) 0)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (>= lq_anf$36$$35$$35$d1FM 0) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FN) (= lq_anf$36$$35$$35$d1FL lq_anf$36$$35$$35$d1FM)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$275) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tJ)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (<= 0 (int_apply_$35$$35$1 size x2s$35$$35$a1tK)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (>= lq_anf$36$$35$$35$d1FL 0)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$275)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$323) (+ 1 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$323))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (= lq_anf$36$$35$$35$d1Fv 2)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$323) 2)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (<= 0 (int_apply_$35$$35$1 size ds_d1DX)) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tF)) (and (= VV$35$$35$F$35$$35$355 lq_anf$36$$35$$35$d1Fb) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$355) 0)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size ds_d1DY)) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1tF))) (= lq_anf$36$$35$$35$d1F3 (int_apply_$35$$35$2 List.$58$$43$$58$$35$$35$rXp x$35$$35$a1tE xs$35$$35$a1tF)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1tF))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (and (= lq_anf$36$$35$$35$d1F9 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= lq_anf$36$$35$$35$d1F9 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9))) (and (= lq_anf$36$$35$$35$d1F9 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9) 0) (= lq_anf$36$$35$$35$d1F9 List.Emp$35$$35$rXo) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F9))) (and (= lq_anf$36$$35$$35$d1Fa lit$36$Bad$32$call$32$to$32$zipWith) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fa) 19)) (and (= lq_anf$36$$35$$35$d1Fb lq_anf$36$$35$$35$d1Fa) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fb) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fa)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fb) 0)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (>= lq_anf$36$$35$$35$d1FM 0) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FN) (= lq_anf$36$$35$$35$d1FL lq_anf$36$$35$$35$d1FM)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (= VV$35$$35$F$35$$35$276 lq_anf$36$$35$$35$d1FN) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tJ)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (<= 0 (int_apply_$35$$35$1 size x2s$35$$35$a1tK)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (>= lq_anf$36$$35$$35$d1FL 0)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$276)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$308) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (>= lq_anf$36$$35$$35$d1FA 0) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (= lq_anf$36$$35$$35$d1FB 3) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FC) (= lq_anf$36$$35$$35$d1FA lq_anf$36$$35$$35$d1FB))))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$308)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1F4 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F8))) (= lq_anf$36$$35$$35$d1F4 (int_apply_$35$$35$2 List.$58$$43$$58$$35$$35$rXp lq_anf$36$$35$$35$d1F7 lq_anf$36$$35$$35$d1F8)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F8))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (and (= lq_anf$36$$35$$35$d1F5 lit$36$Bad$32$call$32$to$32$zipWith) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1F5) 19)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= lq_anf$36$$35$$35$d1F6 lq_anf$36$$35$$35$d1F5) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1F6) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1F5)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1F6) 0)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (<= 0 (int_apply_$35$$35$1 size ds_d1DX)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size ds_d1DY)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (and (= lq_anf$36$$35$$35$d1F3 ds_d1DX) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3) 0) (= lq_anf$36$$35$$35$d1F3 List.Emp$35$$35$rXo) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F3))) (and (= lq_anf$36$$35$$35$d1F4 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4))) (and (= VV$35$$35$F$35$$35$356 lq_anf$36$$35$$35$d1F6) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$356) 0)) (and (= lq_anf$36$$35$$35$d1F4 ds_d1DY) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F4))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1F8))))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= VV$35$$35$F$35$$35$309 lq_anf$36$$35$$35$d1FC) (>= lq_anf$36$$35$$35$d1FA 0) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (= lq_anf$36$$35$$35$d1FB 3) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FC) (= lq_anf$36$$35$$35$d1FA lq_anf$36$$35$$35$d1FB))))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$309)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= lq_anf$36$$35$$35$d1Fu 1) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$326) (+ 1 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$326)))))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$326) 1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1F1 lit$36$concat) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1F1) 6)) (and (= lq_anf$36$$35$$35$d1F2 lq_anf$36$$35$$35$d1F1) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1F2) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1F1)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1F2) 0)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= VV$35$$35$F$35$$35$360 lq_anf$36$$35$$35$d1F2) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$360) 0)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$329) 0) (<= 0 (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$329))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$329) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$330) 0)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1Fh lit$36$Cannot$32$call$32$foldr1$32$with$32$empty$32$list) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fh) 34)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (and (= lq_anf$36$$35$$35$d1Fi lq_anf$36$$35$$35$d1Fh) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fi) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fh)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fi) 0)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (<= 0 (int_apply_$35$$35$1 size ds_d1E3)) (and (= lq_anf$36$$35$$35$d1Fg ds_d1E3) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= lq_anf$36$$35$$35$d1Fg ds_d1E3) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= lq_anf$36$$35$$35$d1Fg ds_d1E3) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg)) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg) 0) (= lq_anf$36$$35$$35$d1Fg List.Emp$35$$35$rXo) (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1Fg))) (and (= VV$35$$35$F$35$$35$346 lq_anf$36$$35$$35$d1Fi) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$346) 0))))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= VV$35$$35$F$35$$35$331 lq_anf$36$$35$$35$d1Ft) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$331) 0)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= lq_anf$36$$35$$35$d1Fs lit$36$empty) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fs) 5)) (and (= lq_anf$36$$35$$35$d1Ft lq_anf$36$$35$$35$d1Fs) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Ft) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fs)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Ft) 0)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (>= n$35$$35$a1tm 0) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FD)) (>= lq_anf$36$$35$$35$d1FE 0) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FF) (= n$35$$35$a1tm lq_anf$36$$35$$35$d1FE)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$300) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$300)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$332) (+ 1 (int_apply_$35$$35$1 size xs$35$$35$a1tk)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO) 0) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FO))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FP))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FQ))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 size xss$35$$35$a1tL) (+ 1 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FR))) (<= 0 (int_apply_$35$$35$1 size xss$35$$35$a1tL))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FS)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (>= lq_anf$36$$35$$35$d1FT 0) (= VV$35$$35$F$35$$35$252 lq_anf$36$$35$$35$d1FV) (= lq_anf$36$$35$$35$d1FU 6) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FV) (= lq_anf$36$$35$$35$d1FT lq_anf$36$$35$$35$d1FU)) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$252)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= (int_apply_$35$$35$1 size List.l2$35$$35$rXt) 2) (<= 0 (int_apply_$35$$35$1 size List.l2$35$$35$rXt))) (bool_apply_$35$$35$1 Prop List.prop_size$35$$35$rXr) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (>= n$35$$35$a1tm 0) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (and (= (int_apply_$35$$35$1 size List.l3$35$$35$rXs) 3) (<= 0 (int_apply_$35$$35$1 size List.l3$35$$35$rXs))) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (<= 0 (int_apply_$35$$35$1 size lq_anf$36$$35$$35$d1FD)) (>= lq_anf$36$$35$$35$d1FE 0) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (= (bool_apply_$35$$35$1 Prop lq_anf$36$$35$$35$d1FF) (= n$35$$35$a1tm lq_anf$36$$35$$35$d1FE)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= (int_apply_$35$$35$1 size List.l0$35$$35$rXv) 0) (<= 0 (int_apply_$35$$35$1 size List.l0$35$$35$rXv))) (= VV$35$$35$F$35$$35$301 lq_anf$36$$35$$35$d1FF) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (and (= (int_apply_$35$$35$1 size List.l1$35$$35$rXu) 1) (<= 0 (int_apply_$35$$35$1 size List.l1$35$$35$rXu))) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not (bool_apply_$35$$35$1 Prop VV$35$$35$F$35$$35$301)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (<= 0 (int_apply_$35$$35$1 size xs$35$$35$a1tk)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= lq_anf$36$$35$$35$d1Fq lit$36$add) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fq) 3)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (and (= lq_anf$36$$35$$35$d1Fr lq_anf$36$$35$$35$d1Fq) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fr) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fq)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fr) 0)) (and (= VV$35$$35$F$35$$35$333 lq_anf$36$$35$$35$d1Fr) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$333) 0)) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (= (int_apply_$35$$35$1 size VV$35$$35$F$35$$35$334) 1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W)) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S)) (not (bool_apply_$35$$35$1 Prop GHC.Types.False$35$$35$68)) (and (= lq_anf$36$$35$$35$d1Fo lit$36$singleton) (= (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fo) 9)) (and (= lq_anf$36$$35$$35$d1Fp lq_anf$36$$35$$35$d1Fo) (= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fp) (int_apply_$35$$35$1 strLen lq_anf$36$$35$$35$d1Fo)) (>= (int_apply_$35$$35$1 len lq_anf$36$$35$$35$d1Fp) 0)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u) (and (= VV$35$$35$F$35$$35$335 lq_anf$36$$35$$35$d1Fp) (>= (int_apply_$35$$35$1 len VV$35$$35$F$35$$35$335) 0)) (and (= (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W) GHC.Types.GT$35$$35$6W) (= GHC.Types.GT$35$$35$6W (int_apply_$35$$35$1 cmp GHC.Types.GT$35$$35$6W))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S) GHC.Types.LT$35$$35$6S) (= GHC.Types.LT$35$$35$6S (int_apply_$35$$35$1 cmp GHC.Types.LT$35$$35$6S))) (and (= (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U) GHC.Types.EQ$35$$35$6U) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U))) (= GHC.Types.EQ$35$$35$6U (int_apply_$35$$35$1 cmp GHC.Types.EQ$35$$35$6U)) (bool_apply_$35$$35$1 Prop GHC.Types.True$35$$35$6u)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(exit)
